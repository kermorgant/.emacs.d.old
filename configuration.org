* Use sensible-defaults.el

Use [[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el]] for some basic settings.

#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/sensible-defaults.el")
  (sensible-defaults/use-all-settings)
  (sensible-defaults/use-all-keybindings)
#+END_SRC

* Set personal information

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Mikael Kermorgant"
        user-mail-address "mikael@kgtech.fi"
        calendar-latitude 59.97
        calendar-longitude 23.44
        calendar-location-name "Raseborg, Finland")
#+END_SRC


* Packages repositories

http://ergoemacs.org/emacs/emacs_package_system.html

#+BEGIN_SRC emacs-lisp
 (when (>= emacs-major-version 24)
   (require 'package)
   (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/")  t)
   (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
   (package-initialize))
#+END_SRC

* Custom key-bindings

Just some handy functions.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-w") 'backward-kill-word)
  (global-set-key (kbd "C-x C-k") 'kill-region)
  (global-set-key (kbd "M-/") 'hippie-expand)
  (global-set-key (kbd "M-o") 'other-window)
  (global-set-key (kbd "M-#") 'sort-lines)
  (global-set-key (kbd "C-c s") 'multi-term)
  (global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

* Coding
** Flycheck
Read this : http://www.flycheck.org/en/latest/user/quickstart.html

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))

(add-hook 'after-init-hook #'global-flycheck-mode)
#+END_SRC

** Yaml
#+BEGIN_SRC emacs-lisp
(require 'yaml-mode)
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
#+END_SRC

** Webdev
*** PHP coding stuff
**** php-mode + hooks
 #+BEGIN_SRC emacs-lisp
 (require 'php-mode)

 (setq auto-mode-alist (append '(("\.php$" . php-mode)) auto-mode-alist))
 (eval-after-load 'php-mode '(require 'php-ext))

 (add-hook 'php-mode-hook
	   '(lambda ()
	      (auto-complete-mode t)
	      (require 'ac-php)
	      (setq ac-sources  '(ac-source-php ) )
	      (yas-global-mode 1)
	      (define-key php-mode-map  (kbd "C-=") 'ac-php-find-symbol-at-point)   ;goto define
	      (define-key php-mode-map  (kbd "C-t") 'ac-php-location-stack-back   ) ;go back
	      ))

 (add-hook 'php-mode-hook
           '(lambda ()
	      (require 'company-php)
	      (company-mode t)
              (add-to-list 'company-backends 'company-ac-php-backend )
	      ))

 (add-hook 'php-mode-hook
           '(lambda ()
	      (when (derived-mode-p 'php-mode)
		(ggtags-mode 1))
	      )
	   )
 (add-hook 'php-mode-hook
	   '(lambda ()
	      (add-to-list 'write-file-functions 'delete-trailing-whitespace))
	   )
 (add-hook 'php-mode-hook 'php-enable-symfony2-coding-style)
 #+END_SRC
**** Debugging

 https://www.mediawiki.org/wiki/MediaWiki-Vagrant/Advanced_usage#Emacs_with_geben

 #+BEGIN_SRC emacs_lisp
 (autoload 'geben "geben" "PHP Debugger on Emacs" t)
 ; firebug shorcuts
 (eval-after-load 'geben
   '(progn
     (define-key geben-mode-map (kbd "<f8>") 'geben-run)
     (define-key geben-mode-map (kbd "<f10>") 'geben-step-over)
     (define-key geben-mode-map (kbd "<f11>") 'geben-step-into)
     (define-key geben-mode-map (kbd "S-<f11>") 'geben-step-out)))
 #+END_SRC

*** Web-mode
#+BEGIN_SRC emacs-lisp
 (require 'web-mode)

 (add-to-list 'auto-mode-alist '("\\.md\\'" . web-mode))
 (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
 (add-to-list 'auto-mode-alist '("\\.html.twig\\'" . web-mode))
 (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))

 (setq web-mode-enable-css-colorization t)
 (setq web-mode-enable-current-element-highlight t)
 (setq web-mode-ac-sources-alist
   '(("css" . (ac-source-css-property))
     ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
 (setq web-mode-code-indent-offset 2)
 (setq web-mode-css-indent-offset 2)
 (setq web-mode-markup-indent-offset 2)
 ;; padding
 ;; For <style> parts
 (setq web-mode-style-padding 1)
 ;; For <script> parts
 (setq web-mode-script-padding 1)
 ;; For multi-line blocks
 (setq web-mode-block-padding 0)


#+END_SRC
*** CSS & SCSS
 #+BEGIN_SRC emacs-lisp
 (add-hook 'css-mode-hook
           (lambda ()
           (rainbow-mode)
           (setq css-indent-offset 2)))
 (autoload 'scss-mode "scss-mode")
 (add-to-list 'auto-mode-alist '("\\.scss\\'" . scss-mode))
 #+END_SRC

** Projectile

Projectile's default binding of =projectile-ag= to =C-c p s s= is clunky enough
that I rarely use it (and forget it when I need it). This binds the
easier-to-type =C-c C-v= and =C-c v= to useful searches.

#+BEGIN_SRC emacs-lisp
  (defun hrs/search-project-for-symbol-at-point ()
    "Use `projectile-ag' to search the current project for `symbol-at-point'."
    (interactive)
    (projectile-ag (projectile-symbol-at-point)))

  (global-set-key (kbd "C-c v") 'projectile-ag)
  (global-set-key (kbd "C-c C-v") 'hrs/search-project-for-symbol-at-point)

  (setq projectile-switch-project-action 'neotree-projectile-action)

  ;;(setq projectile-keymap-prefix (kbd "C-c C-p"))

  (projectile-global-mode)
#+END_SRC

** Window movements

*** TODO Fix that in org-mode

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-<left>")  'windmove-left)
(global-set-key (kbd "M-<right>") 'windmove-right)
(global-set-key (kbd "M-<up>")    'windmove-up)
(global-set-key (kbd "M-<down>")  'windmove-down)
#+END_SRC

* UI

#+BEGIN_SRC emacs-lisp
(global-font-lock-mode 1)
#+END_SRC

** Neotree

#+BEGIN_SRC emacs-lisp
(defun neotree-project-dir ()
  "Open NeoTree using the git root."
  (interactive)
  (let ((project-dir (projectile-project-root))
	(file-name (buffer-file-name)))
    (if project-dir
	(if (neotree-toggle)
	    (progn
	      (neotree-dir project-dir)
	      (neotree-find file-name)))
      (message "Could not find git project root."))))

(global-set-key [f8] 'neotree-project-dir)
(require 'neotree)

(global-set-key [f8] 'neotree-toggle)
(setq neo-smart-open t)
(setq neo-window-width 40)
 #+END_SRC

** Custom solarized-dark theme


#+BEGIN_SRC emacs-lisp

  (when window-system
    (setq solarized-use-variable-pitch nil)
    (setq solarized-height-plus-1 1.0)
    (setq solarized-height-plus-2 1.0)
    (setq solarized-height-plus-3 1.0)
    (setq solarized-height-plus-4 1.0)
    (setq solarized-high-contrast-mode-line t)
    (load-theme 'solarized-dark t))
 #+END_SRC

** Highlight the current line

=global-hl-line-mode= softly highlights the background color of the line
containing point. It makes it a bit easier to find point, and it's useful when
pairing or presenting code.

#+BEGIN_SRC emacs-lisp
  (when window-system
    (global-hl-line-mode))
#+END_SRC

* Org-mode

outline of pretty bullets instead of a list of asterisks.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
          (lambda ()
            (org-bullets-mode t)))
#+END_SRC

Use syntax highlighting in source blocks while editing.


#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

I like seeing a little downward-pointing arrow instead of the usual ellipsis (...) that org displays when there’s stuff under a header.

#+BEGIN_SRC emacs-lisp
(setq org-ellipsis "⤵")
#+END_SRC
