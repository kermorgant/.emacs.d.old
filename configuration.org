

* defaults
** custom file
   Emacs has a built-in customization interface that helps beginners customize a
   lot of options. However it is limited and one needs to grok some Emacs Lisp
   anyway. Sometimes, I change stuff in my configuration that invokes/adds via
   the customization interface. This results in automatic inserting of some code
   into my init.el which messes up the version control. We tell Emacs to store
   in a separate file and load it if it exists.


   #+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el"
  user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
   #+END_SRC

** Use sensible-defaults.el

Use [[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el]] for some basic settings.

#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/sensible-defaults.el")
  (sensible-defaults/use-all-settings)
  (sensible-defaults/use-all-keybindings)
#+END_SRC
** local paths
#+BEGIN_SRC emacs-lisp
(defvar user-emacs-cache-directory
  (concat (getenv "HOME") "/.cache/emacs"))

#+END_SRC
** Set personal information

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Mikael Kermorgant"
        user-mail-address "mikael@kgtech.fi"
        calendar-latitude 59.97
        calendar-longitude 23.44
        calendar-location-name "Raseborg, Finland")
#+END_SRC

** backups
   #+BEGIN_SRC emacs-lisp
     ;; Backups at .saves folder in the current folder
     (setq backup-by-copying t      ; don't clobber symlinks
           backup-directory-alist
           '(("." . "~/.saves"))    ; don't litter my fs tree
           delete-old-versions t
           kept-new-versions 6
           kept-old-versions 2
           version-control t)       ; use versioned backups

   #+END_SRC
** auto-saving
   I make sure Emacs auto-saves often but the result is that it messes up my
   file tree. So, let’s ask Emacs to store its backups in some temporary
   directory.

   #+BEGIN_SRC emacs-lisp
     (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t))
           create-lockfiles nil)
   #+END_SRC
** persistent history
   #+BEGIN_SRC emacs-lisp
     (savehist-mode)
   #+END_SRC
* git
** magit
   magit rocks !
   #+BEGIN_SRC emacs-lisp
     (use-package magit-gitflow
       :ensure t
     )

     (use-package magit
       :ensure t
       :init
       (setq magit-display-buffer-function
           #'magit-display-buffer-fullframe-status-v1)
       (add-hook 'magit-mode-hook 'turn-on-magit-gitflow)
       :config
       (setq magit-completing-read-function 'ivy-completing-read)
     )
   #+END_SRC

** git-timemachine
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :ensure t
    :commands (git-timemachine-toggle
               git-timemachine-switch-branch)
    :bind* (("M-m g l" . git-timemachine-toggle)
            ("M-m g L" . git-timemachine-switch-branch)))
#+END_SRC

** ediff

  Ediff mode is a UNIX patching tool and my version controlling
  package uses this to help resolve merge conflicts and having some
  better defaults will be useful for this.

https://www.gnu.org/software/emacs/manual/html_node/ediff/

#+BEGIN_SRC emacs-lisp
  (setq ediff-window-setup-function 'ediff-setup-windows-plain
        ediff-split-window-function 'split-window-horizontally)
#+END_SRC
* Org-mode
** ensure presence

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure org)

  (use-package org
    :ensure t
    :bind (("C-c l" . org-store-link)
         ("C-c c" . org-capture)
         ("C-c a" . org-agenda))

    :config
    (require 'org-id)

    ;(define-key global-map "\C-cl" 'org-store-link)
    ;(define-key global-map "\C-ca" 'org-agenda)
    ;(define-key global-map "\C-cc" 'org-capture)
    (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
    (add-to-list 'auto-mode-alist '("\\.txt$" . org-mode))
    (add-hook 'org-mode-hook 'flyspell-mode)

    ; conflict management
    (setq org-support-shift-select t)

    ;outline of pretty bullets instead of a list of asterisks.
    (add-hook 'org-mode-hook (lambda() (org-bullets-mode t)))

    ;Use syntax highlighting in source blocks while editing.
    (setq org-src-fontify-natively t)
    (setq org-src-tab-acts-natively t)

    ;I like seeing a little downward-pointing arrow instead of the usual ellipsis
    ;(...) that org displays when there’s stuff under a header.
    (setq org-ellipsis "⤵")
    ;(org-reload)
  )
#+END_SRC

** Task and org-capture management

#+BEGIN_SRC emacs-lisp
  (setq org-index-file "~/foretag/Dropbox/org/index.org")
  (setq org-agenda-files (list org-index-file))
  (setq org-log-done 'time)
#+END_SRC
*** Capturing tasks
    Define a few common tasks as capture templates.

    #+BEGIN_SRC emacs-lisp
      (setq org-capture-templates
            '(("b" "Blog idea"
               entry
               (file "~/foretag/Dropbox/org/blog-ideas.org")
               "* TODO %?\n")

              ("l" "Today I Learned..."
               entry
               (file+datetree "~/foretag/Dropbox/org/til.org")
               "* %?\n")

              ("r" "Reading"
               checkitem
               (file "~/foretag/Dropbox/org/to-read.org"))

              ("t" "Todo"
               entry
               (file+headline org-index-file "Tasks")
               "* TODO %?\n")))
    #+END_SRC
*** Keybindings
    #+BEGIN_SRC emacs-lisp
      (defun open-index-file ()
        "Open the master org TODO list."
        (interactive)
        (find-file org-index-file)
        ;(flycheck-mode -1)
        (end-of-buffer))

      (global-set-key (kbd "C-c i") 'open-index-file)
    #+END_SRC
** Latex export
   useful source comments here :
   https://github.com/yyr/org-mode/blob/master/lisp/ox-latex.el

   #+BEGIN_SRC noemacs-lisp
(add-to-list 'org-latex-classes
             '("kgtech1"
               "\\documentclass{article}
\\usepackage[hidelinks]{hyperref}
\\usepackage[hyperref,x11names]{xcolor}
\\usepackage[colorlinks=true,urlcolor=SteelBlue4,linkcolor=Firebrick4]{hyperref}
               [NO-DEFAULT-PACKAGES]
               [NO-PACKAGES]"
             ("\\section{%s}" . "\\section*{%s}")
             ("\\subsection{%s}" . "\\subsection*{%s}")
             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
             ("\\paragraph{%s}" . "\\paragraph*{%s}")
             ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
   #+END_SRC
*** from alcove
**** template definition
    #+BEGIN_SRC emacs-lisp
      (setq org-src-fontify-natively t
            org-latex-listings t)

      (setq org-latex-template
            "\\documentclass[a4paper,oneside]{scrartcl}
      [NO-DEFAULT-PACKAGES]
      [NO-PACKAGES]
      \\oddsidemargin -0.5 cm
      \\evensidemargin -0.5 cm
      \\marginparwidth 0.0 in
      \\parindent 0.0 in
      \\topmargin -1.5 cm
      \\textheight 25.7 cm
      \\textwidth 17 cm
      \\advance\\headsep 2 ex
      \\advance\\textheight -2 cm
      \\renewcommand{\\baselinestretch}{1.14}
      \\addtolength{\\parskip}{1.2 ex}

      \\usepackage{color}
      \\usepackage{listings}
      \\usepackage{fancyhdr}
      \\usepackage[utf8]{inputenc}
      \\usepackage[T1]{fontenc}

      \\definecolor{lightgray}{RGB}{230,230,230}
      \\definecolor{orange}{RGB}{255,127,0}
      \\lstset{
      breaklines=true,
      breakindent=40pt,
      prebreak=\\raisebox {0 ex }[0 ex ][0 ex ]{ \\ensuremath { \\hookleftarrow }},
      basicstyle=\\ttfamily\\small,
      keywordstyle=\\color{black}\\bfseries\\underbar,
      identifierstyle=,
      stringstyle=\\color{orange},
      commentstyle=\\color{red},
      language=bash,
      backgroundcolor=\\color{lightgray},
      showstringspaces=false}

      \\lstdefinelanguage{diff}{
        morecomment=[f][\\color{black}\\bfseries\\underbar]{diff},
        morecomment=[f][\\color{blue}]{@@},
        morecomment=[f][\\color{red}]-,
        morecomment=[f][\\color{green}]+,
        morecomment=[f][\\color{black}]{---},
        morecomment=[f][\\color{black}]{+++},
      }

      \\fancyhf{}
      \\fancyhf[HRE,HLO]{\\leftmark}
      \\fancyhf[HLE,HRO]{\\includegraphics[width=2cm]{%s}}
      \\fancyhf[FLE,FLO]{\\bfseries \\THETITLE}
      \\fancyhf[FRE,FRO]{\\bfseries \\thepage/\\pageref*{LastPage}}

      \\pagestyle{fancy}
      \\linespread{1.05}

      \\def\\title#1{\\gdef\\@title{#1}\\gdef\\THETITLE{#1}}
      \\makeatletter
      \\renewcommand\\maketitle{
        \\thispagestyle{empty}
        \\begin{center}
          \\includegraphics[width=8cm]{%s}\\par
          {\\Huge \\bfseries \\THETITLE\\par}
          {\\Large \\@author\\par}
          {\\large \\@date\\par}
        \\end{center}
      }
      \\makeatother

      \\usepackage{graphicx}
      \\usepackage{longtable}
      \\usepackage{wrapfig}
      \\usepackage{soul}
      \\usepackage[colorlinks=true,urlcolor=SteelBlue4,linkcolor=Firebrick4]{hyperref}
      \\usepackage[hyperref,x11names]{xcolor}
      \\usepackage[a4]{}
      \\usepackage{palatino}
      \\usepackage[frenchb, english]{babel}
      \\usepackage[french]{babel}
      \\usepackage{float}
      \\usepackage{lastpage}
      \\usepackage{color}
      \\usepackage[osf,sc]{mathpazo}
      \\usepackage{MnSymbol}
      \\usepackage[babel=true]{microtype}
      \\usepackage{marvosym}
      \\usepackage{url}
      "
      )
    #+END_SRC
**** class kgtech
    #+BEGIN_SRC emacs-lisp
      (with-eval-after-load 'ox-latex
        (add-to-list 'org-latex-classes
         `("kgtech"
           ,(format org-latex-template "\\string~/kgtech.jpg" "\\string~/kgtech.jpg")
           ("\\section{%s}" . "\\section*{%s}")
           ("\\subsection{%s}" . "\\subsection*{%s}")
           ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
           ("\\paragraph{%s}" . "\\paragraph*{%s}")
           ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
        )
    #+END_SRC

*** a4article
    #+BEGIN_SRC emacs-lisp
      (with-eval-after-load 'ox-latex

        (add-to-list 'org-latex-classes
               '("a4article" "\\documentclass[11pt,a4paper]{article}
      \\usepackage[hyperref,x11names]{xcolor}
      \\usepackage[colorlinks=true,urlcolor=SteelBlue4,linkcolor=Firebrick4]{hyperref}
      "
                  ("\\section{%s}" . "\\section*{%s}")
                  ("\\subsection{%s}" . "\\subsection*{%s}")
                  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                  ("\\paragraph{%s}" . "\\paragraph*{%s}")
                  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
      )
    #+END_SRC

*** hitec
    #+BEGIN_SRC emacs-lisp
(with-eval-after-load 'ox-latex

  (add-to-list 'org-latex-classes
             '("hitec"
             "\\documentclass{hitec}
               \\usepackage{graphicx}
               \\usepackage{parskip}
               \\usepackage{pstricks}
               \\usepackage{textcomp}
               \\usepackage[tikz]{bclogo}
               \\usepackage{listings}
               \\usepackage{fancyvrb}
               \\presetkeys{bclogo}{ombre=true,epBord=3,couleur = blue!15!white,couleurBord = red,arrondi = 0.2,logo=\bctrombone}{}
               \\usetikzlibrary{patterns}
               \\company{Kgtech}
               \\usepackage[hyperref,x11names]{xcolor}
               \\usepackage[colorlinks=true,urlcolor=SteelBlue4,linkcolor=Firebrick4]{hyperref}
               [NO-DEFAULT-PACKAGES]
               [NO-PACKAGES]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
)
    #+END_SRC

*** from koma
    #+BEGIN_SRC noemacs-lisp
(setq org-latex-classes nil)
(add-to-list 'org-latex-classes
          '("koma-article"
             "\\documentclass{scrartcl}"
             ("\\section{%s}" . "\\section*{%s}")
             ("\\subsection{%s}" . "\\subsection*{%s}")
             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
             ("\\paragraph{%s}" . "\\paragraph*{%s}")
             ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    #+END_SRC
*** koma try
    #+BEGIN_SRC noemacs-lisp

(require 'ox-koma-letter)

(eval-after-load 'ox-koma-letter
  '(progn
     (add-to-list 'org-latex-classes
                  '("my-letter"
                    "\\documentclass\{scrlttr2\}
     \\usepackage[english]{babel}
     \\setkomavar{frombank}{(1234)\\,567\\,890}
     \[DEFAULT-PACKAGES]
     \[PACKAGES]
     \[EXTRA]"))

     (setq org-koma-letter-default-class "my-letter")))

    #+END_SRC

*** from emacs-fu
    #+BEGIN_SRC noemacs-lisp
(add-to-list 'org-latex-classes
  '("djcb-org-article"
"\\documentclass[11pt,a4paper]{article}
\\usepackage[T1]{fontenc}
\\usepackage{graphicx}
\\usepackage{geometry}
\\geometry{a4paper, textwidth=6.5in, textheight=10in,
            marginparsep=7pt, marginparwidth=.6in}
\\pagestyle{empty}
\\title{}
      [NO-DEFAULT-PACKAGES]
      [NO-PACKAGES]"
     ("\\section{%s}" . "\\section*{%s}")
     ("\\subsection{%s}" . "\\subsection*{%s}")
     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
     ("\\paragraph{%s}" . "\\paragraph*{%s}")
     ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    #+END_SRC

** presentation
   #+BEGIN_SRC emacs-lisp
     (setq org-reveal-root "file:///~/.emacs.d/reveal.js")
   #+END_SRC

* Pdf files
Emacs has the built-in DocView mode which lets me view Pdfs.
#+BEGIN_SRC emacs-lisp
(setq doc-view-continuous t)
#+END_SRC
* Editing Settings
** Always indent with spaces
   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
   #+END_SRC
** Wrap paragraphs automatically
   #+BEGIN_SRC emacs-lisp
     (add-hook 'text-mode-hook 'turn-on-auto-fill)
     (add-hook 'gfm-mode-hook 'turn-on-auto-fill)
     (add-hook 'org-mode-hook 'turn-on-auto-fill)
   #+END_SRC

** abbrev mode

https://www.emacswiki.org/emacs/AbbrevMode

#+BEGIN_SRC emacs-lisp
  (setq abbrev-file-name             ;; tell emacs where to read abbrev
        "~/.emacs.d/abbrev_defs")    ;; definitions from...
  (setq save-abbrevs t)              ;; save abbrevs when files are saved
#+END_SRC
** Spell checking
   An automatic dictionary switcher for Emacs spell checking
   https://github.com/nschum/auto-dictionary-mode
   #+BEGIN_SRC emacs-lisp
      (use-package auto-dictionary
        :ensure t
        :init
          (add-hook 'flyspell-mode-hook (auto-dictionary-mode t))
      )
   #+END_SRC

** expand some words and auto-correct

   #+BEGIN_SRC emacs-lisp
     (define-key ctl-x-map "\C-i"
       #'endless/ispell-word-then-abbrev)

     (defun endless/simple-get-word ()
       (car-safe (save-excursion (ispell-get-word nil))))

     (defun endless/ispell-word-then-abbrev (p)
       "Call `ispell-word', then create an abbrev for it.
     With prefix P, create local abbrev. Otherwise it will
     be global.
     If there's nothing wrong with the word at point, keep
     looking for a typo until the beginning of buffer. You can
     skip typos you don't want to fix with `SPC', and you can
     abort completely with `C-g'."
       (interactive "P")
       (let (bef aft)
         (save-excursion
           (while (if (setq bef (endless/simple-get-word))
                      ;; Word was corrected or used quit.
                      (if (ispell-word nil 'quiet)
                          nil ; End the loop.
                        ;; Also end if we reach `bob'.
                        (not (bobp)))
                    ;; If there's no word at point, keep looking
                    ;; until `bob'.
                    (not (bobp)))
             (backward-word)
             (backward-char))
           (setq aft (endless/simple-get-word)))
         (if (and aft bef (not (equal aft bef)))
             (let ((aft (downcase aft))
                   (bef (downcase bef)))
               (define-abbrev
                 (if p local-abbrev-table global-abbrev-table)
                 bef aft)
               (message "\"%s\" now expands to \"%s\" %sally"
                        bef aft (if p "loc" "glob")))
           (user-error "No typo at or before point"))))

     (setq save-abbrevs 'silently)
     (setq-default abbrev-mode t)
   #+END_SRC

** better undo

   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :ensure t
       :config
       (global-undo-tree-mode 1))
   #+END_SRC

** Custom key-bindings

   Just some handy functions.

   #+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-w") 'backward-kill-word)
  (global-set-key (kbd "C-x C-k") 'kill-region)
  (global-set-key (kbd "M-/") 'hippie-expand)
  (global-set-key (kbd "M-o") 'other-window)
  (global-set-key (kbd "M-#") 'sort-lines)
  (global-set-key (kbd "C-c s") 'multi-term)
  (global-set-key (kbd "C-x g") 'magit-status)
  (global-set-key (kbd "C-<nSPC>") 'expand-abbrev)
  (global-set-key (kbd "s-f") 'projectile-grep) ; Win+f

  (defalias 'redo 'undo-tree-redo)
   #+END_SRC
** Cycle in the beginning of line


   #+BEGIN_SRC emacs-lisp
     (defun kgt::cycle-bol-boi ()
       "Cycle between beginning of line and beginning of indentation."
       (interactive)
       (let ((orig (point)))
         (back-to-indentation)
         (when (= orig (point))
           (move-beginning-of-line 1))))

     (global-set-key (kbd "C-a") 'kgt::cycle-bol-boi)

   #+END_SRC
** new line at the end

   Avoid reaching for the return key to add newlines!
   #+BEGIN_SRC emacs-lisp
     (setq next-line-add-newlines t)
   #+END_SRC

* built-in browser
  #+BEGIN_SRC emacs-lisp
    (use-package eww
      :bind* (("M-m g x" . eww)
              ("M-m g :" . eww-browse-with-external-browser)
              ("M-m g #" . eww-list-histories)
              ("M-m g {" . eww-back-url)
              ("M-m g }" . eww-forward-url))
      :config
      (progn
        (add-hook 'eww-mode-hook 'visual-line-mode)))
  #+END_SRC
* rest-client
nice rest client to play with api

+ https://github.com/pashky/restclient.el
+ https://github.com/for-GET/know-your-http-well

#+BEGIN_SRC emacs-lisp

  (use-package restclient :ensure t)

  (use-package know-your-http-well :ensure t)

#+END_SRC
* Company-mode

https://www.emacswiki.org/emacs/CompanyMode#toc8

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :bind (("M-t"   . company-complete)
           ("C-c f" . company-files)
           ("M-/" . company-dabbrev) ; dabbrev is for local variables
           ("C-c d" . company-ispell)
           :map company-active-map
           ("C-n"    . company-select-next)
           ("C-p"    . company-select-previous)
           ([return] . company-complete-selection)
           ("C-w"    . backward-kill-word)
           ("C-c"    . company-abort)
           ("C-c"    . company-search-abort))
    :diminish (company-mode . "ς")
    :config
    (global-company-mode 1)
    (setq use-package-always-ensure     nil  ;; Disable completion from Company backend for use-package
          company-idle-delay            0.0  ;; 0.1 second delay before the pop-up appears
          company-minimum-prefix-length 2
          )
    (add-to-list 'company-backends 'company-restclient)
    )

  (use-package company-restclient :ensure t)

  (use-package company-tern
    :ensure t
    :bind (("C-c t" . company-tern))
    :init
    (setq company-tern-property-marker "")
    (setq company-tern-meta-as-single-line t)
    :config
    (add-to-list 'company-backends 'company-tern))

  (use-package company-web
    :ensure t
    :bind (("C-c w" . company-web-html))
    :config
    (add-to-list 'company-backends 'company-web-html))

  (setq company-dabbrev-downcase nil)

  (use-package company-quickhelp
    :ensure t
    :config
    (company-quickhelp-mode 1)
    (setq company-quickhelp-delay 0.1)
  )
#+END_SRC

* Coding
** silver search
   How could I work without it ?
   #+BEGIN_SRC emacs-lisp
     (use-package ag :ensure t)
   #+END_SRC
** code folding
   #+BEGIN_SRC emacs-lisp
     (use-package origami :ensure t
       :commands (origami-toggle-node)
       :bind* (("M-m -" . origami-toggle-node)))
   #+END_SRC

** smartparens
   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
       :ensure t
       :demand t
       :bind* (("M-m m j" . sp-down-sexp)
               ("M-m m k" . sp-backward-up-sexp)
               ("M-m m h" . sp-backward-down-sexp)
               ("M-m m l" . sp-up-sexp)
               ("M-m m f" . sp-forward-sexp)
               ("M-m m b" . sp-backward-sexp)
               ("M-m m a" . sp-beginning-of-sexp)
               ("M-m m e" . sp-end-of-sexp)
               ("M-m m n" . sp-next-sexp)
               ("M-m m p" . sp-previous-sexp)
               ("M-m m >" . sp-forward-barf-sexp)
               ("M-m m <" . sp-backward-barf-sexp)
               ("M-m m )" . sp-forward-slurp-sexp)
               ("M-m m (" . sp-backward-slurp-sexp)
               ("M-m m x" . sp-transpose-sexp)
               ("M-m m d" . sp-kill-sexp)
               ("M-m m y" . sp-copy-sexp)
               ("M-m m u" . sp-unwrap-sexp)
               ("M-m m U" . sp-backward-unwrap-sexp)
               ("M-m m C" . sp-convolute-sexp)
               ("M-m m r" . sp-raise-sexp)
               ("M-m m s" . sp-split-sexp)
               ("M-m m S" . sp-splice-sexp)
               ("M-m m F" . sp-splice-sexp-killing-forward)
               ("M-m m B" . sp-splice-sexp-killing-backward)
               ("M-m m A" . sp-splice-sexp-killing-around))
       :diminish smartparens-mode
       :diminish smartparens-strict-mode
       :config
       (require 'smartparens-config)
       (smartparens-global-mode)
       (sp-local-pair 'web-mode "{%" "%}" :wrap "C-%")
       (sp-local-pair 'web-mode "<" ">" :wrap "C->")
       ;(smartparens-global-strict-mode)
       (show-smartparens-global-mode)
       (which-key-add-key-based-replacements
         "M-m m" "move prefix"))
   #+END_SRC

** yasnippets

   The latest version of yasnippet doesn't play well with Org mode.
   #+BEGIN_SRC noemacs-lisp
     (defun yas/org-very-safe-expand ()
       (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))
   #+END_SRC

   Tell org-mode to use that function
   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-holok
               (lambda ()
                 (make-variable-buffer-local 'yas/trigger-key)
                 (setq yas/trigger-key [tab])
                 (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
                 (define-key yas/keymap [tab] 'yas/next-field)))
   #+END_SRC


   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet :ensure t :defer 30
                  :bind (("C-o" . yas-insert-snippet))
                  :diminish (yas-minor-mode . "γ")
                  :config
                  ;(setq yas/triggers-in-field t); Enable nested triggering of snippets
                  ;(setq yas-prompt-functions '(yas-completing-prompt))
                  ;(add-hook 'snippet-mode-hook '(lambda () (setq-local require-final-newline nil)))
                  (yas-global-mode))

                                             ;(setq yas-fallback-behavior 'indent-line
                                             ;      yas-snippet-dirs '("~/.emacs.d/snippets/angular/")))

                                             ; https://github.com/magnars/angular-snippets.el
                                             ;(use-package angular-snippets :ensure t :defer 30)

            ;; (use-package php-auto-yasnippets
            ;; :config
            ;; (progn
            ;;   (setq php-auto-yasnippet-php-program
            ;;   (concat user-emacs-directory  "lisp/Create-PHP-YASnippet.php"))
            ;;   (define-key php-mode-map (kbd "C-c C-y") 'yas/create-php-snippet)
            ;; ))

   #+END_SRC
** Highlight uncommitted changes
   #+BEGIN_SRC emacs-lisp
     (use-package diff-hl :ensure t
       :config
        (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
        (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
        (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode))
   #+END_SRC

** expand-region
   Expand region increases the selected region by semantic units. Just keep
   pressing the key until it selects what you want.
   #+BEGIN_SRC emacs-lisp
     (require 'expand-region)
     (global-set-key (kbd "M-é") 'er/expand-region)
     (global-set-key (kbd "C-M-é") 'er/contract-region)
   #+END_SRC
** powerline

   #+BEGIN_SRC emacs-lisp
     (use-package powerline
     :ensure t
     :init
     (powerline-default-theme))
   #+END_SRC
lexical
** Yaml
   #+BEGIN_SRC emacs-lisp

     (use-package highlight-indentation :ensure t )
     (use-package smart-shift :ensure t )

     (use-package yaml-mode
       :ensure t
       :config
       (add-hook 'yaml-mode-hook 'highlight-indentation-mode)
       (add-hook 'yaml-mode-hook 'smart-shift-mode)
       :init
       (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
       (setq yaml-indent-offset 4)
                                             ;(add-hook '(point)hp-mode-hook (auto-fill-mode 0))
       )
   #+END_SRC
** PHP
    TODO = Read this : https://www.philnewton.net/guides/emacs-as-a-php-editor/
    this seems also interesting :
    https://github.com/aaronbieber/dotfiles/blob/master/configs/emacs.d/lisp/init-php.el

**** php-mode + hooks

     #+BEGIN_SRC emacs-lisp
          ;(use-package php-eldoc :ensure t)

          (use-package highlight-symbol :ensure t)

          (defun configure-php-mode ()
            "Set up all of my PHP mode preferences."
            (require 'newcomment)
            (setq auto-fill-function 'do-auto-fill)
            (setq flycheck-disabled-checkers '(php-phpmd))

            (when (boundp 'company-backends)
              (setq-local company-backends
                   '((company-dabbrev-code
                      php-extras-company
                      company-gtags
                      company-etags
                      company-keywords
                      ;company-ac-php-backend
                      ))))

            ;(when (fboundp 'php-extras-eldoc-documentation-function)
            ;  (add-function :before-until (local 'eldoc-documentation-function)
            ;                'php-extras-eldoc-documentation-function))

            ;(eldoc-mode t)
            (highlight-symbol-mode)
            (auto-fill-mode 0)
            (add-to-list 'write-file-functions 'delete-trailing-whitespace)
            (ggtags-mode t)
           ; (flycheck-mode)
            (yas-minor-mode t))

          (defun my-php-mode-hook ()
            (setq indent-tabs-mode nil)
            (setq c-basic-offset 4)
            (setq php-template-compatibility nil)
            (setq php-manual-path "/usr/local/share/php/php-chunked-xhtml/")
            (subword-mode 1)
            (smartparens-mode t)
            (php-enable-symfony2-coding-style)
          )

          (use-package php-mode
            :ensure t
            :init
            (setq auto-mode-alist (append '(("\.php$" . php-mode)) auto-mode-alist))
            ;(add-hook 'php-mode-hook 'my-php-mode-hook)
            ;(add-hook 'php-mode-hook 'configure-php-mode)
          )

          (use-package company-php
            :ensure t
            :config
            (progn
              ;(setq-default ac-php-tags-path
              ;              (concat user-emacs-cache-directory "/ac-php"))

              (add-hook 'php-mode-hook
                        '(lambda ()
                           (unless (executable-find "ctags")
                             (error "Program: ctags is missing"))
                           (company-mode t)))
              ;(define-key php-mode-map (kbd "C-]") 'ac-php-find-symbol-at-point)
              ;(define-key php-mode-map (kbd "C-t") 'ac-php-location-stack-back)
              )
            )
     #+END_SRC


**** Debugging

  https://www.mediawiki.org/wiki/MediaWiki-Vagrant/Advanced_usage#Emacs_with_geben

  #+BEGIN_SRC noemacs_lisp
  (autoload 'geben "geben" "PHP Debugger on Emacs" t)
  ; firebug shorcuts
  (eval-after-load 'geben
    '(progn
      (define-key geben-mode-map (kbd "<f8>") 'geben-run)
      (define-key geben-mode-map (kbd "<f10>") 'geben-step-over)
      (define-key geben-mode-map (kbd "<f11>") 'geben-step-into)
      (define-key geben-mode-map (kbd "S-<f11>") 'geben-step-out)))
  #+END_SRC
** Web-mode
   #+BEGIN_SRC emacs-lisp
        (use-package web-mode
          :ensure t
          :bind ("M-é" . web-mode-mark-and-expand)
          :init
          (add-to-list 'auto-mode-alist '("\\.md\\'" . web-mode))
          (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
          (add-to-list 'auto-mode-alist '("\\.html.twig\\'" . web-mode))
          (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))

          (setq web-mode-enable-css-colorization t)
          (setq web-mode-enable-current-element-highlight t)
          (setq web-mode-ac-sources-alist
                '(("css" . (ac-source-css-property))
                  ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
          (setq web-mode-code-indent-offset 2)
          (setq web-mode-css-indent-offset 2)
          (setq web-mode-markup-indent-offset 2)
          ;; padding
          ;; For <style> parts
          (setq web-mode-style-padding 1)
          ;; For <script> parts
          (setq web-mode-script-padding 1)
          ;; For multi-line blocks
          (setq web-mode-block-padding 0)
          (setq web-mode-enable-auto-pairing nil)
          )

   #+END_SRC
** Javascript
   https://afsmnghr.github.io/emacs/angular/
   #+BEGIN_SRC emacs-lisp
     (use-package js2-mode :ensure t :defer ;TODO:
       :mode (("\\.js\\'" . js2-mode)
              ("\\.json\\'" . javascript-mode))
       :commands js2-mode
       :init (progn
               (setq-default js2-basic-offset 2
                             js2-indent-switch-body t
                             js2-auto-indent-p t
                             js2-global-externs '("angular")
                             js2-indent-on-enter-key t
                             flycheck-disabled-checkers '(javascript-jshint)
                             flycheck-checkers '(javascript-eslint)
                             flycheck-eslintrc "~/.eslintrc"))
               (add-to-list 'interpreter-mode-alist (cons "node" 'js2-mode))
               ;(add-to-list 'js2-mode-hook 'flycheck-mode)
               ;(add-to-list 'js2-mode-hook 'smartparens-mode)
             )
   #+END_SRC

   configure auto-complete with tern
   #+BEGIN_SRC emacs-lisp
     (use-package tern
       :ensure t :defer t
       :init (add-hook 'javascript-hook 'tern-mode)
       (add-to-list 'company-backends 'company-tern))
   #+END_SRC

** typescript
  #+BEGIN_SRC emacs-lisp
    (defun setup-tide-mode ()
      (interactive)
      (tide-setup)
      ;(flycheck-mode +1)
      (setq flycheck-check-syntax-automatically '(save mode-enabled))
      ;(eldoc-mode +1)
      (tide-hl-identifier-mode +1)
      ;; company is an optional dependency. You have to
      ;; install it separately via package-install
      ;; `M-x package-install [ret] company`
      (company-mode +1))

    (use-package tide
      :ensure t
      :init
      (add-hook 'before-save-hook 'tide-format-before-save)
      (add-hook 'typescript-mode-hook #'setup-tide-mode)
      (setq tide-format-options
            '(
              :insertSpaceAfterFunctionKeywordForAnonymousFunctions t :placeOpenBraceOnNewLineForFunctions nil)
            )
      )





  #+END_SRC

** less/sass/css
   nice to have tool (highlights color hexadecimal values with matching color)
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-mode :ensure t)
   #+END_SRC

   less-css-mode is for less files
   #+BEGIN_SRC emacs-lisp
     (use-package less-css-mode :ensure t
       :mode ("\\.less\\'" . less-css-mode)
     )

   #+END_SRC

** Flycheck
   Read this : http://www.flycheck.org/en/latest/user/quickstart.html

   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :init
       (global-flycheck-mode t)
       (add-hook 'after-init-hook #'global-flycheck-mode)
     )

     (use-package flycheck-color-mode-line
       :ensure t
       :no-require t
       :config
       (add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode)
     )
     (use-package flycheck-pos-tip
       :ensure t
       :no-require t
       :config
       (add-hook 'flycheck-mode-hook 'flycheck-pos-tip-mode)
     )
   #+END_SRC
* git
** magit
   magit rocks !
   #+BEGIN_SRC emacs-lisp
     (use-package magit-gitflow
       :ensure t
     )

     (use-package magit
       :ensure t
       :init
       (setq magit-display-buffer-function
           #'magit-display-buffer-fullframe-status-v1)
       (add-hook 'magit-mode-hook 'turn-on-magit-gitflow)
       :config
       (setq magit-completing-read-function 'ivy-completing-read)
     )
   #+END_SRC

** git-timemachine
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :ensure t
    :commands (git-timemachine-toggle
               git-timemachine-switch-branch)
    :bind* (("M-m g l" . git-timemachine-toggle)
            ("M-m g L" . git-timemachine-switch-branch)))
#+END_SRC

** ediff

  Ediff mode is a UNIX patching tool and my version controlling
  package uses this to help resolve merge conflicts and having some
  better defaults will be useful for this.

https://www.gnu.org/software/emacs/manual/html_node/ediff/

#+BEGIN_SRC emacs-lisp
  (setq ediff-window-setup-function 'ediff-setup-windows-plain
        ediff-split-window-function 'split-window-horizontally)
#+END_SRC
* Sysadmin
** tramp mode
   #+BEGIN_SRC emacs-lisp
     (setq tramp-default-method "ssh"
           tramp-backup-directory-alist backup-directory-alist
           tramp-ssh-controlmaster-options "ssh")
   #+END_SRC
** Docker
   #+BEGIN_SRC emacs-lisp
     (use-package dockerfile-mode
       :ensure t
       :init
       (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))
     )
   #+END_SRC
* UI
** split window and move
   #+BEGIN_SRC emacs-lisp
     (defun mk/split-below-and-move ()
       (interactive)
       (split-window-below)
       (other-window 1))
     (defun mk/split-right-and-move ()
       (interactive)
       (split-window-right)
       (other-window 1))
   #+END_SRC

   + Keybindings
   #+BEGIN_SRC emacs-lisp
     (bind-keys
       ("C-x 2" . mk/split-below-and-move)
       ("C-x 3" . mk/split-right-and-move))
   #+END_SRC

** which key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :defer t
  :diminish which-key-mode
  :init
  (setq which-key-sort-order 'which-key-key-order-alpha)
  :bind* (("M-m ?" . which-key-show-top-level))
  :config
  (which-key-mode)
  (which-key-add-key-based-replacements
    "M-m ?" "top level bindings"))

#+END_SRC
** Appearance
   #+BEGIN_SRC emacs-lisp
     (global-font-lock-mode 1)
     ;(set-frame-font "Inconsolata")
     (set-frame-font "-PfEd-Inconsolata-normal-normal-normal-*-15-*-*-*-m-0-iso10646-1")
     (tool-bar-mode 0)
     (setq-default fill-column 80)
     (when window-system (scroll-bar-mode -1))
   #+END_SRC
** ivy

 In MELPA, Ivy is split into three packages: ivy, swiper and counsel; you can
 simply install counsel which will bring in the other two as dependencies.

 #+BEGIN_SRC emacs-lisp

   (use-package ivy :ensure t
     :bind (("C-x C-b" . ivy-switch-buffer))
    )
   (use-package swiper :ensure t)


   (defun mk-ivy-partial-or-done ()
     (interactive)
     (or (ivy-partial)
         (ivy-alt-done)))

   (defun mk-ivy-open-current-directory ()
     (interactive)
     (when ivy--directory
       (let ((dir ivy--directory))
         (message (format "Open directory: %s" dir))
         (delete-minibuffer-contents)
         (ivy--done dir))))

   (use-package counsel
     :ensure t
     :init
     (ivy-mode 1)
     :config
     (setq ivy-use-virtual-buffers t)
     (setq ivy-count-format "(%d/%d) ")
     (global-set-key (kbd "C-s") 'swiper)
     (global-set-key (kbd "M-x") 'counsel-M-x)
     (global-set-key (kbd "C-x C-f") 'counsel-find-file)
     (global-set-key (kbd "<f1> f") 'counsel-describe-function)
     (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
     (global-set-key (kbd "<f1> l") 'counsel-find-library)
     (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
     (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
     (global-set-key (kbd "C-c C-r") 'ivy-resume)

     (setq ivy-re-builders-alist
      '((swiper            . ivy--regex-plus)
        (ivy-switch-buffer . ivy--regex-fuzzy)
        (t                 . ivy--regex-fuzzy)))

     ;; (setq ivy-re-builders-alist
     ;;  '((t . ivy--regex-fuzzy)))

     ;(setq ivy-re-builders-alist
     ;      '((read-file-name-internal . ivy--regex-fuzzy)
     ;        (t . ivy--regex-plus)))

     (define-key ivy-minibuffer-map (kbd "TAB") 'mk-ivy-partial-or-done)
     (define-key ivy-minibuffer-map (kbd "<return>") 'ivy-alt-done)
     (define-key ivy-minibuffer-map (kbd "C-f") 'mk-ivy-open-current-directory)
     (setq ivy-extra-directories nil)

     (global-set-key (kbd "C-c g") 'counsel-git)
     (global-set-key (kbd "C-c j") 'counsel-git-grep)
     (global-set-key (kbd "C-c k") 'counsel-ag)
   )
   (use-package ivy-hydra :ensure t)
 #+END_SRC

While we're here, let's also increase recentf's items

#+BEGIN_SRC emacs-lisp
  (setq recentf-max-menu-items 100)
#+END_SRC

** avy
   Avy lets you jump anywhere on screen based on character, characters, lines or
   words. Amazing !
   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :ensure t
       :init
       (setq avy-keys-alist
             `((avy-goto-char-timer . (?j ?k ?l ?f ?s ?d ?e ?r ?u ?i))
               (avy-goto-line . (?j ?k ?l ?f ?s ?d ?e ?r ?u ?i))))
       (setq avy-style 'pre)
       :bind* (("M-z" . avy-goto-char-timer)
               ("M-m z" . avy-goto-line)))
   #+END_SRC
** smex
#+BEGIN_SRC emacs-lisp
(use-package smex
  :ensure t
  :config
  (smex-initialize))

#+END_SRC
** hydra
   #+BEGIN_SRC emacs-lisp
     (use-package hydra :ensure t)
                                             ; an example
     (defhydra hydra-zoom (global-map "<f2>")
       "zoom"
       ("g" text-scale-increase "in")
       ("l" text-scale-decrease "out"))

   #+END_SRC
** Terminal
   #+BEGIN_SRC emacs-lisp
        (require 'multi-term)
        (setq multi-term-program "/bin/bash")

     (add-hook 'term-mode-hook
               (lambda ()
                 (goto-address-mode)
                 (define-key term-raw-map (kbd "M-o") 'other-window)
               ))
   #+END_SRC
** Session
   Saving Emacs Sessions
   #+BEGIN_SRC emacs-lisp
;     (desktop-save-mode 1)
;     (setq desktop-restore-eager 5)
;     (setq desktop-save t)
   #+END_SRC

** Neotree

   #+BEGIN_SRC emacs-lisp
     (use-package neotree

       :init
       (setq neo-smart-open t)
       (setq neo-window-width 40)
       (setq projectile-switch-project-action 'neotree-projectile-action)

       :bind (([f8] . neotree-projectile-action)
              ([f9] . neotree-toggle))

       :config
       (defun neotree-project-dir ()
         "Open NeoTree using the git root."
         (interactive)
         (let ((project-dir (projectile-project-root))
               (file-name (buffer-file-name)))
           (if project-dir
             (if (neotree-toggle)
                 (progn
                   (neotree-dir project-dir)
                   (neotree-find file-name)))
           (message "Could not find git project root."))))
     )
   #+END_SRC

** Custom solarized-dark theme


   #+BEGIN_SRC emacs-lisp
     (when window-system
       (setq solarized-use-variable-pitch nil)
       (setq solarized-height-plus-1 1.0)
       (setq solarized-height-plus-2 1.0)
       (setq solarized-height-plus-3 1.0)
       (setq solarized-height-plus-4 1.0)
       (setq solarized-high-contrast-mode-line t)
       (load-theme 'solarized-dark t))
   #+END_SRC

** Highlight the current line

   =global-hl-line-mode= softly highlights the background color of the line
   containing point. It makes it a bit easier to find point, and it's useful when
   pairing or presenting code.

   #+BEGIN_SRC emacs-lisp
     (when window-system
       (global-hl-line-mode))
   #+END_SRC

** Windmove
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c C-<left>")  'windmove-left)
     (global-set-key (kbd "C-c C-<right>") 'windmove-right)
     (global-set-key (kbd "C-c C-<up>")    'windmove-up)
     (global-set-key (kbd "C-c C-<down>")  'windmove-down)
   #+END_SRC
** winner-mode
   Winner mode is an Emacs built-in package that lets you undo and redo window
   configurations. Incredibly useful since I keep splitting and merging windows
  all the time. Let’s enable it.
   #+BEGIN_SRC emacs-lisp
     (when (fboundp 'winner-mode)
       (winner-mode 1))
   #+END_SRC

** Toggle zoom

#+BEGIN_SRC emacs-lisp
(use-package zoom-window
  :ensure t
  :bind* (("M-m Z" . zoom-window-zoom)))
#+END_SRC

** ido
*** ido itself
    #+BEGIN_SRC noemacs-lisp
      (ido-mode 1)
      (ido-everywhere 1)
    #+END_SRC

*** ido ubiquitous
    #+BEGIN_SRC noemacs-lisp
      (use-package ido-ubiquitous
        :ensure t
        :init
        (ido-ubiquitous-mode 1)
      )
    #+END_SRC

*** vertical mode
    Makes ido-mode display vertically.
    #+BEGIN_SRC noemacs-lisp
      (require 'ido-vertical-mode)
      (ido-mode 1)
      (ido-vertical-mode 1)
      ;(setq ido-vertical-define-keys 'C-n-and-C-p-only)
      (setq ido-vertical-define-keys 'C-n-C-p-up-and-down)
    #+END_SRC
*** flx-ido
    #+BEGIN_SRC noemacs-lisp
      (require 'flx-ido)

      (flx-ido-mode 1)
      ; disable ido faces to see flx highlights.
      (setq ido-enable-flex-matching t)
      (setq ido-use-faces nil)
    #+END_SRC
** buffers
   #+BEGIN_SRC emacs-lisp
     (use-package ace-jump-mode
       :ensure t
       :init
        (setq ajb-bs-configuration "projectile")
       )
   #+END_SRC

* Projectile + perspective
** perspective

#+BEGIN_SRC emacs-lisp
(use-package perspective :ensure t
  :config
  (persp-mode))
#+END_SRC

** projectile

  Projectile's default binding of =projectile-ag= to =C-c p s s= is clunky
  enough that I rarely use it (and forget it when I need it). This binds the
  easier-to-type =C-c C-v= and =C-c v= to useful searches.

  #+BEGIN_SRC emacs-lisp

    (defun hrs/search-project-for-symbol-at-point ()
        "Use `projectile-ag' to search the current project for `symbol-at-point'."
        (interactive)
        (projectile-ag (projectile-symbol-at-point)))

    (use-package projectile
      :ensure t
      :bind (("C-x C-p" . projectile-command-map)
             ("C-c v" . projectile-ag)
             ("C-c C-v" . hrs/search-project-for-symbol-at-point))
      :init
      (setq projectile-switch-project-action 'projectile-dired)
      (setq projectile-completion-system 'ivy)
      :config
      (projectile-global-mode)
      )

      (use-package counsel-projectile :ensure t
        :bind (("C-x ," . ace-jump-projectile-buffers)
               ("C-x C-," . counsel-projectile-find-file))
      )
           ;(setq projectile-enable-caching t)
  #+END_SRC

** persp-projectile

   #+BEGIN_SRC emacs-lisp
     (use-package persp-projectile
       :ensure t
  ;     :defer 1
       :bind (("C-c p p" . projectile-persp-switch-project))
       :config
       (persp-mode)
       )
   #+END_SRC
** frame naming & projectile
   #+BEGIN_SRC emacs-lisp
     (use-package nameframe :ensure t)
     (use-package nameframe-projectile :ensure t
      :bind ("M-p" . nameframe-switch-frame)
      :config
      (nameframe-projectile-mode t)
     )
   #+END_SRC
* Dired
  Load up the assorted dired extensions.

  #+BEGIN_SRC emacs-lisp
    (use-package dired+
      :ensure t)
    (use-package dired-open
      :ensure t)
  #+END_SRC

  Kill buffers of files/directories that are deleted in dired.
  #+BEGIN_SRC emacs-lisp
    (setq dired-clean-up-buffers-too t)
  #+END_SRC

  Always copy directories recursively instead of asking every time.
  #+BEGIN_SRC emacs-lisp
    (setq dired-recursive-copies 'always)
  #+END_SRC

  Ask before recursively deleting a directory, though.
  #+BEGIN_SRC emacs-lisp
    (setq dired-recursive-deletes 'top)
  #+END_SRC
* touch typing
  need a break ?
  #+BEGIN_SRC emacs-lisp
    (use-package typit
      :ensure t
      :commands (typit))
  #+END_SRC
* Online help
** how do I ?
#+BEGIN_SRC emacs-lisp
  (use-package howdoi
    :ensure t
    :bind* (("M-m g Y"   . howdoi-query)
            ("M-m SPC y" . howdoi-query-line-at-point)
            ("M-m SPC Y" . howdoi-query-insert-code-snippet-at-point)))
#+END_SRC
** Stack Exchange
   #+BEGIN_SRC emacs-lisp
  (use-package sx :ensure t)
   #+END_SRC
* Local configuration
#+BEGIN_SRC emacs-lisp
(when (file-exists-p (concat user-emacs-directory "local.org"))
  (org-babel-load-file (concat user-emacs-directory "local.org")))

#+END_SRC
