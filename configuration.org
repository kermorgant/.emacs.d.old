* defaults
** custom file
   Emacs has a built-in customization interface that helps beginners customize a
   lot of options. However it is limited and one needs to grok some Emacs Lisp
   anyway. Sometimes, I change stuff in my configuration that invokes/adds via
   the customization interface. This results in automatic inserting of some code
   into my init.el which messes up the version control. We tell Emacs to store
   in a separate file and load it if it exists.


   #+BEGIN_SRC emacs-lisp
     (setq custom-file (expand-file-name "custom.el"
     user-emacs-directory))
     (when (file-exists-p custom-file)
       (load custom-file))
   #+END_SRC

** Use sensible-defaults.el
   Use [[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el]] for some basic settings.

   #+BEGIN_SRC emacs-lisp
     (load-file "~/.emacs.d/sensible-defaults.el")
     (sensible-defaults/use-all-settings)
     (sensible-defaults/use-all-keybindings)
   #+END_SRC
** local paths
   #+BEGIN_SRC emacs-lisp
     (defvar user-emacs-cache-directory
       (concat (getenv "HOME") "/.cache/emacs"))
     (add-to-list 'exec-path (concat (getenv "HOME") "/.config/composer/vendor/bin"))
   #+END_SRC
** Set personal information

   #+BEGIN_SRC emacs-lisp
     (setq user-full-name "Mikael Kermorgant"
           user-mail-address "mikael@kgtech.fi"
           calendar-latitude 59.97
           calendar-longitude 23.44
           calendar-location-name "Raseborg, Finland")
   #+END_SRC

** backups
   #+BEGIN_SRC emacs-lisp
     ;; Backups at .saves folder in the current folder
     (setq backup-by-copying t      ; don't clobber symlinks
           backup-directory-alist
           '(("." . "~/.saves"))    ; don't litter my fs tree
           delete-old-versions t
           kept-new-versions 6
           kept-old-versions 2
           version-control t)       ; use versioned backups

   #+END_SRC
** auto-saving
   I make sure Emacs auto-saves often but the result is that it messes up my
   file tree. So, let’s ask Emacs to store its backups in some temporary
   directory.

   #+BEGIN_SRC emacs-lisp
     (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t))
           create-lockfiles nil)
   #+END_SRC
** persistent history
   #+BEGIN_SRC emacs-lisp
     (savehist-mode)
   #+END_SRC
** cursor
   #+BEGIN_SRC emacs-lisp
     (setq-default cursor-type '(bar . 1))
     (blink-cursor-mode -1)
   #+END_SRC
** Bind key to some unbound defaults
   #+BEGIN_SRC emacs-lisp
     (bind-keys*
      ("C-r"       . dabbrev-expand)
      ("M-/"       . hippie-expand)
      ("C-S-d"     . kill-whole-line)
      ("M-m SPC c" . load-theme)
      ("M-m SPC R" . locate)
      ("M-m W"     . winner-undo)
      ("M-m g m"   . make-frame)
      ("M-m g M"   . delete-frame)
      ("M-m g n"   . select-frame-by-name)
      ("M-m g N"   . set-frame-name)
      ("M-m B"     . mode-line-other-buffer)
      ("M-m ="     . indent-region)
      ("M-m g ("   . Info-prev)
      ("M-m g )"   . Info-next)
      ("M-m ^"     . Info-up)
      ("M-m &"     . Info-goto-node)
      ("M-m g f"   . find-file-at-point)
      ("M-m g u"   . downcase-region)
      ("M-m g U"   . upcase-region)
      ("M-m g C"   . capitalize-region)
      ("M-m g F"   . follow-mode)
      ("M-m R"     . overwrite-mode)
      ("M-m g j"   . doc-view-next-page)
      ("M-m g k"   . doc-view-previous-page)
      ("M-m : t"   . emacs-init-time)
      ("M-m g q"   . fill-paragraph)
      ("M-m g @"   . compose-mail)
      ("M-m SPC ?" . describe-bindings))
   #+END_SRC
* modalka

  #+BEGIN_SRC emacs-lisp
    (defun exit-on-esc ()
      (interactive)
      (modalka-mode 1))
;      (insert-char 32))

    (use-package modalka
      :ensure t
      :demand t
      :bind* (("C-z" . modalka-mode))
      :diminish (modalka-mode . "μ")
      :init
      (setq modalka-cursor-type 'box)
      :config
 ;     (global-set-key (kbd "<escape>") #'modalka-mode)
      (global-set-key (kbd "<escape>") #'exit-on-esc)
      (modalka-global-mode 1)
      (add-to-list 'modalka-excluded-modes 'magit-status-mode)
      (add-to-list 'modalka-excluded-modes 'magit-popup-mode)
      (add-to-list 'modalka-excluded-modes 'eshell-mode)
      (add-to-list 'modalka-excluded-modes 'deft-mode)
      (add-to-list 'modalka-excluded-modes 'term-mode)
      (add-to-list 'modalka-excluded-modes 'undo-tree-mode)
      (which-key-add-key-based-replacements
        "M-m"     "Modalka prefix"
        "M-m :"   "extended prefix"
        "M-m m"   "move prefix"
        "M-m s"   "send code prefix"
        "M-m SPC" "user prefix"
        "M-m g"   "global prefix"
        "M-m o"   "org prefix"
        "M-m a"   "expand around prefix"
        "M-m i"   "expand inside prefix"
        "M-m ["   "prev nav prefix"
        "M-m ]"   "next nav prefix")
      )
  #+END_SRC
** Default modal keybindings
*** numbers
    #+BEGIN_SRC emacs-lisp
      (modalka-define-kbd "0" "C-0")
      (modalka-define-kbd "1" "C-1")
      (modalka-define-kbd "2" "C-2")
      (modalka-define-kbd "3" "C-3")
      (modalka-define-kbd "4" "C-4")
      (modalka-define-kbd "5" "C-5")
      (modalka-define-kbd "6" "C-6")
      (modalka-define-kbd "7" "C-7")
      (modalka-define-kbd "8" "C-8")
      (modalka-define-kbd "9" "C-9")
    #+END_SRC
*** Movement and one key presses
    #+BEGIN_SRC emacs-lisp
      (modalka-define-kbd "h" "C-b")
      (modalka-define-kbd "j" "C-n")
      (modalka-define-kbd "k" "C-p")
      (modalka-define-kbd "l" "C-f")
      (modalka-define-kbd "e" "M-f")
      (modalka-define-kbd "b" "M-b")
      (modalka-define-kbd "n" "M-n")
      (modalka-define-kbd "N" "M-p")
      (modalka-define-kbd "{" "M-{")
      (modalka-define-kbd "}" "M-}")
      (modalka-define-kbd "0" "C-a")
      (modalka-define-kbd "$" "C-e")
      (modalka-define-kbd "G" "M->")
      (modalka-define-kbd "y" "M-w")
      (modalka-define-kbd "p" "C-y")
      (modalka-define-kbd "P" "M-y")
      (modalka-define-kbd "x" "C-d")
      (modalka-define-kbd "D" "C-k")
      (modalka-define-kbd "z" "C-l")
      (modalka-define-kbd "!" "M-&")
      (modalka-define-kbd "J" "C-v")
      (modalka-define-kbd "K" "M-v")
      (modalka-define-kbd "M" "C-u")
      (modalka-define-kbd "(" "M-a")
      (modalka-define-kbd ")" "M-e")
      (modalka-define-kbd "/" "C-s")
      (modalka-define-kbd "E" "C-g")
      (modalka-define-kbd "d" "C-w")
      (modalka-define-kbd "w" "C-x o")
      (modalka-define-kbd "W" "M-m W")
      (modalka-define-kbd "B" "M-m B")
      (modalka-define-kbd "H" "C-x >")
      (modalka-define-kbd "L" "C-x <")
      (modalka-define-kbd "Z" "C-x 1")
     ; (modalka-define-kbd "q" "C-x (")
      (modalka-define-kbd "Q" "C-x )")
      (modalka-define-kbd "." "M-m .")
      (modalka-define-kbd "?" "M-m ?")
      (modalka-define-kbd "v" "C-SPC")
      (modalka-define-kbd "V" "M-m V")
      (modalka-define-kbd "=" "M-m =")
      (modalka-define-kbd "R" "M-m R")
      (modalka-define-kbd "X" "C-x C-x")
      (modalka-define-kbd "+" "C-x r m")
      (modalka-define-kbd "'" "C-x r b")
      (modalka-define-kbd "\\" "C-c C-c")
    #+END_SRC
*** Global prefixed keys
    #+BEGIN_SRC emacs-lisp
      (modalka-define-kbd "g g" "M-<")
      (modalka-define-kbd "g o" "C-x C-e")
      (modalka-define-kbd "g O" "C-M-x")
      (modalka-define-kbd "g m" "M-m g m")
      (modalka-define-kbd "g M" "M-m g M")
      (modalka-define-kbd "g n" "M-m g n")
      (modalka-define-kbd "g N" "M-m g N")
      (modalka-define-kbd "g f" "M-m g f")
      (modalka-define-kbd "g F" "M-m g F")
      (modalka-define-kbd "g j" "M-m g j")
      (modalka-define-kbd "g k" "M-m g k")
      (modalka-define-kbd "g q" "M-m g q")
      (modalka-define-kbd "g w" "C-x 3")
      (modalka-define-kbd "g W" "C-x 2")
      (modalka-define-kbd "g @" "M-m g @")
      (modalka-define-kbd "g ;" "M-m g ;")
      (modalka-define-kbd "g :" "M-m g :")
      (modalka-define-kbd "g #" "M-m g #")
      (modalka-define-kbd "g {" "M-m g {")
      (modalka-define-kbd "g }" "M-m g }")
      (modalka-define-kbd "g (" "M-m g (")
      (modalka-define-kbd "g )" "M-m g )")
      (modalka-define-kbd "^" "M-m ^")
      (modalka-define-kbd "&" "M-m &")
      (modalka-define-kbd "g S" "C-j")
      (modalka-define-kbd "g ?" "C-h k")
    #+END_SRC
*** Select region prefixed keys
    #+BEGIN_SRC emacs-lisp
      (modalka-define-kbd "i a" "C-x h")
    #+END_SRC

*** Forward navigation prefixed keys
    #+BEGIN_SRC emacs-lisp
      (modalka-define-kbd "] ]" "C-x n n")
      (modalka-define-kbd "] s" "M-m ] s")
    #+END_SRC
*** Backward navigation prefixed keys
    #+BEGIN_SRC emacs-lisp
    (modalka-define-kbd "[ [" "C-x n w")
    #+END_SRC

*** Extended prefix to quit/restart and time
    #+BEGIN_SRC emacs-lisp
      (modalka-define-kbd ": q" "C-x C-c")
      (modalka-define-kbd ": r" "C-x M-c")
      (modalka-define-kbd ": t" "M-m : t")
    #+END_SRC

*** User prefix for common functions
    #+BEGIN_SRC emacs-lisp
      (modalka-define-kbd "g U" "C-c C-k")
      (modalka-define-kbd "SPC j" "M-x")
      (modalka-define-kbd "SPC a" "C-x b")
      (modalka-define-kbd "SPC k" "C-x k")
      (modalka-define-kbd "SPC g" "M-g g")
      (modalka-define-kbd "SPC d" "C-x d")
      (modalka-define-kbd "SPC q" "C-x 0")
      (modalka-define-kbd "SPC f" "C-x C-f")
      (modalka-define-kbd "SPC w" "C-x C-s")
      (modalka-define-kbd "SPC c" "M-m SPC c")
      (modalka-define-kbd "SPC R" "M-m SPC R")
      (modalka-define-kbd "SPC ?" "M-m SPC ?")
    #+END_SRC

** Which key explanations for everything
*** numbers
#+BEGIN_SRC emacs-lisp
(which-key-add-key-based-replacements
  "0" "0"
  "1" "1"
  "2" "2"
  "3" "3"
  "4" "4"
  "5" "5"
  "6" "6"
  "7" "7"
  "8" "8"
  "9" "9")
#+END_SRC
*** movement and one key presses
    #+BEGIN_SRC emacs-lisp
      (which-key-add-key-based-replacements
        "ESC" "toggle mode"
        "DEL" "smart del"
        "TAB" "smart tab"
        "RET" "smart enter"
        "h"   "prev char"
        "j"   "next line"
        "k"   "prev line"
        "l"   "next char"
        "e"   "next word"
        "b"   "prev word"
        "n"   "next history item"
        "N"   "prev history item"
        "{"   "next para"
        "}"   "prev para"
        "0"   "start of line"
        "$"   "end of line"
        "("   "start of sentence"
        ")"   "end of sentence"
        "/" "search"
        "E"   "exit anything"
        "B"   "previous buffer"
        "W"   "winner undo"
        "w"   "other window"
        "G"   "end of file"
        "d"   "delete selection"
        "y"   "copy selection"
        "p"   "paste"
        "P"   "paste history"
        "x"   "delete char"
        "D"   "delete rest of line"
        "M"   "modify argument"
        "z"   "scroll center/top/bot"
        "Z"   "zoom into window"
        "H"   "scroll left"
        "J"   "scroll down"
        "K"   "scroll up"
        "L"   "scroll right"
        "'"   "org edit separately"
;        "q"   "start macro"
        "Q"   "end macro"
        "?"   "top level bindings"
        "v"   "start selection"
        "R"   "overwrite mode"
        "X"   "exchange point and mark"
        "+"   "set bookmark"
        "'"   "jump to bookmark"
        "="   "indent region"
        "\\"  "C-c C-c"
        "!"   "async shell command"
        "&"   "shell command")
    #+END_SRC
*** Global prefixed keys
    #+BEGIN_SRC emacs-lisp
      (which-key-add-key-based-replacements
        "g"   "global prefix"
        "g g" "start of file"
        "g m" "make frame"
        "g M" "delete frame"
        "g n" "select frame by name"
        "g N" "name frame"
        "g j" "next pdf page"
        "g k" "previous pdf page"
        "g f" "file/url at cursor"
        "g F" "enable follow mode"
        "g o" "eval elisp"
        "g O" "eval defun"
        "g w" "vertical split win"
        "g W" "horizontal split win"
        "g S" "split line"
        "g @" "compose mail"
        "g #" "list eww histories"
        "g x" "browse with eww"
        "g :" "browse with external browser"
        "g {" "eww back"
        "g }" "eww forward"
        "g (" "info previous"
        "g )" "info next"
        "^"   "info up"
        "&"   "info goto"
        "g q" "format para"
        "g ?" "find command bound to key")
    #+END_SRC
*** Select region
    #+BEGIN_SRC emacs-lisp
      (which-key-add-key-based-replacements
        "i"   "expand prefix"
        "i a" "expand entire buffer")
    #+END_SRC
*** forward navigation
    #+BEGIN_SRC emacs-lisp
      (which-key-add-key-based-replacements
        "]"   "forward nav/edit"
        "] ]" "narrow region"
        "] s" "next spell error")
    #+END_SRC
*** Backward navigation
    #+BEGIN_SRC emacs-lisp
      (which-key-add-key-based-replacements
        "["   "backward nav/edit"
        "[ [" "widen region")
    #+END_SRC
*** User prefix for common functions
    #+BEGIN_SRC emacs-lisp
      (which-key-add-key-based-replacements
        "SPC"   "custom prefix"
        "SPC ?" "describe bindings"
        "SPC j" "jump to cmd"
        "SPC f" "find file"
        "SPC a" "switch buffers"
        "SPC g" "goto line"
        "SPC d" "dired"
        "SPC k" "close buffer"
        "SPC w" "save buffer"
        "SPC c" "load theme"
        "SPC R" "locate"
        "SPC q" "quit window"
        "g U"   "simulate C-c C-k")
    #+END_SRC
* git
** magit
   magit rocks !
   #+BEGIN_SRC emacs-lisp
     (use-package magit-gitflow
       :ensure t
     )

     (use-package magit
       :ensure t
       :init
       (setq magit-display-buffer-function
           #'magit-display-buffer-fullframe-status-v1)
       (add-hook 'magit-mode-hook 'turn-on-magit-gitflow)
       :config
       (setq magit-completing-read-function 'ivy-completing-read)
     )
   #+END_SRC

** git-timemachine
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :ensure t
    :commands (git-timemachine-toggle
               git-timemachine-switch-branch)
    :bind* (("M-m g l" . git-timemachine-toggle)
            ("M-m g L" . git-timemachine-switch-branch)))
#+END_SRC

** ediff

  Ediff mode is a UNIX patching tool and my version controlling
  package uses this to help resolve merge conflicts and having some
  better defaults will be useful for this.

https://www.gnu.org/software/emacs/manual/html_node/ediff/

#+BEGIN_SRC emacs-lisp
  (setq ediff-window-setup-function 'ediff-setup-windows-plain
        ediff-split-window-function 'split-window-horizontally)
#+END_SRC
* Org-mode
** ensure presence

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure org)

  (use-package org
    :ensure t
    :bind (("C-c l" . org-store-link)
         ("C-c c" . org-capture)
         ("C-c a" . org-agenda))

    :config
    (require 'org-id)
    (require 'ox-md)

    ;(define-key global-map "\C-cl" 'org-store-link)
    ;(define-key global-map "\C-ca" 'org-agenda)
    ;(define-key global-map "\C-cc" 'org-capture)
    (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
    (add-to-list 'auto-mode-alist '("\\.txt$" . org-mode))
    (add-hook 'org-mode-hook 'flyspell-mode)

    ; conflict management
    (setq org-support-shift-select t)

    ;outline of pretty bullets instead of a list of asterisks.
    (add-hook 'org-mode-hook (lambda() (org-bullets-mode t)))

    ;Use syntax highlighting in source blocks while editing.
    (setq org-src-fontify-natively t)
    (setq org-src-tab-acts-natively t)

    ;I like seeing a little downward-pointing arrow instead of the usual ellipsis
    ;(...) that org displays when there’s stuff under a header.
    (setq org-ellipsis "⤵")
    ;(org-reload)
  )
#+END_SRC

** Task and org-capture management

#+BEGIN_SRC emacs-lisp
  (setq org-index-file "~/foretag/Dropbox/org/index.org")
  (setq org-learned-file "~/foretag/Dropbox/org/til.org")
  (setq org-agenda-files (list org-index-file))
  (setq org-log-done 'time)
#+END_SRC
*** Capturing tasks
    Define a few common tasks as capture templates.

    #+BEGIN_SRC emacs-lisp
      (setq org-capture-templates
            '(("b" "Blog idea"
               entry
               (file "~/foretag/Dropbox/org/blog-ideas.org")
               "* TODO %?\n")

              ("l" "Today I Learned..."
               entry
               (file+datetree org-learned-file)
               "* %?\n")

              ("r" "Reading"
               checkitem
               (file "~/foretag/Dropbox/org/to-read.org"))

              ("t" "Todo"
               entry
               (file+headline org-index-file "Tasks")
               "* TODO %?\n")))
    #+END_SRC
*** Keybindings
    #+BEGIN_SRC emacs-lisp
      (defun open-file (arg)
        "Open the file put as argument."
        (interactive)
        (find-file arg)
        ;(flycheck-mode -1)
        (end-of-buffer))

      (global-set-key (kbd "C-c i") (lambda () (interactive) (open-file org-index-file)))
      (global-set-key (kbd "C-c o") (lambda () (interactive) (open-file org-learned-file)))
    #+END_SRC
*** projectile integration

#+BEGIN_SRC emacs-lisp
  (use-package org-projectile
    :bind (("C-c n p" . org-projectile:project-todo-completing-read)
           ("C-c c"   . org-capture))
    :config
    (progn
      (org-projectile:per-repo)
      (setq org-projectile:per-repo-filename "project_todo.org")
      (setq org-agenda-files (append org-agenda-files (org-projectile:todo-files)))
      (add-to-list 'org-capture-templates (org-projectile:project-todo-entry "p")))
    :ensure t)

#+END_SRC
** Latex export
   useful source comments here :
   https://github.com/yyr/org-mode/blob/master/lisp/ox-latex.el

   #+BEGIN_SRC noemacs-lisp
(add-to-list 'org-latex-classes
             '("kgtech1"
               "\\documentclass{article}
\\usepackage[hidelinks]{hyperref}
\\usepackage[hyperref,x11names]{xcolor}
\\usepackage[colorlinks=true,urlcolor=SteelBlue4,linkcolor=Firebrick4]{hyperref}
               [NO-DEFAULT-PACKAGES]
               [NO-PACKAGES]"
             ("\\section{%s}" . "\\section*{%s}")
             ("\\subsection{%s}" . "\\subsection*{%s}")
             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
             ("\\paragraph{%s}" . "\\paragraph*{%s}")
             ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
   #+END_SRC
*** from alcove
**** template definition
    #+BEGIN_SRC emacs-lisp
      (setq org-src-fontify-natively t
            org-latex-listings t)

      (setq org-latex-template
            "\\documentclass[a4paper,oneside]{scrartcl}
      [NO-DEFAULT-PACKAGES]
      [NO-PACKAGES]
      \\oddsidemargin -0.5 cm
      \\evensidemargin -0.5 cm
      \\marginparwidth 0.0 in
      \\parindent 0.0 in
      \\topmargin -1.5 cm
      \\textheight 25.7 cm
      \\textwidth 17 cm
      \\advance\\headsep 2 ex
      \\advance\\textheight -2 cm
      \\renewcommand{\\baselinestretch}{1.14}
      \\addtolength{\\parskip}{1.2 ex}

      \\usepackage{color}
      \\usepackage{listings}
      \\usepackage{fancyhdr}
      \\usepackage[utf8]{inputenc}
      \\usepackage[T1]{fontenc}

      \\definecolor{lightgray}{RGB}{230,230,230}
      \\definecolor{orange}{RGB}{255,127,0}
      \\lstset{
      breaklines=true,
      breakindent=40pt,
      prebreak=\\raisebox {0 ex }[0 ex ][0 ex ]{ \\ensuremath { \\hookleftarrow }},
      basicstyle=\\ttfamily\\small,
      keywordstyle=\\color{black}\\bfseries\\underbar,
      identifierstyle=,
      stringstyle=\\color{orange},
      commentstyle=\\color{red},
      language=bash,
      backgroundcolor=\\color{lightgray},
      showstringspaces=false}

      \\lstdefinelanguage{diff}{
        morecomment=[f][\\color{black}\\bfseries\\underbar]{diff},
        morecomment=[f][\\color{blue}]{@@},
        morecomment=[f][\\color{red}]-,
        morecomment=[f][\\color{green}]+,
        morecomment=[f][\\color{black}]{---},
        morecomment=[f][\\color{black}]{+++},
      }

      \\fancyhf{}
      \\fancyhf[HRE,HLO]{\\leftmark}
      \\fancyhf[HLE,HRO]{\\includegraphics[width=2cm]{%s}}
      \\fancyhf[FLE,FLO]{\\bfseries \\THETITLE}
      \\fancyhf[FRE,FRO]{\\bfseries \\thepage/\\pageref*{LastPage}}

      \\pagestyle{fancy}
      \\linespread{1.05}

      \\def\\title#1{\\gdef\\@title{#1}\\gdef\\THETITLE{#1}}
      \\makeatletter
      \\renewcommand\\maketitle{
        \\thispagestyle{empty}
        \\begin{center}
          \\includegraphics[width=8cm]{%s}\\par
          {\\Huge \\bfseries \\THETITLE\\par}
          {\\Large \\@author\\par}
          {\\large \\@date\\par}
        \\end{center}
      }
      \\makeatother

      \\usepackage{graphicx}
      \\usepackage{longtable}
      \\usepackage{wrapfig}
      \\usepackage{soul}
      \\usepackage[colorlinks=true,urlcolor=SteelBlue4,linkcolor=Firebrick4]{hyperref}
      \\usepackage[hyperref,x11names]{xcolor}
      \\usepackage[a4]{}
      \\usepackage{palatino}
      \\usepackage[frenchb, english]{babel}
      \\usepackage[french]{babel}
      \\usepackage{float}
      \\usepackage{lastpage}
      \\usepackage{color}
      \\usepackage[osf,sc]{mathpazo}
      \\usepackage{MnSymbol}
      \\usepackage[babel=true]{microtype}
      \\usepackage{marvosym}
      \\usepackage{url}
      "
      )
    #+END_SRC
**** class kgtech
    #+BEGIN_SRC emacs-lisp
      (with-eval-after-load 'ox-latex
        (add-to-list 'org-latex-classes
         `("kgtech"
           ,(format org-latex-template "\\string~/kgtech.jpg" "\\string~/kgtech.jpg")
           ("\\section{%s}" . "\\section*{%s}")
           ("\\subsection{%s}" . "\\subsection*{%s}")
           ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
           ("\\paragraph{%s}" . "\\paragraph*{%s}")
           ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
        )
    #+END_SRC

*** a4article
    #+BEGIN_SRC emacs-lisp
      (with-eval-after-load 'ox-latex

        (add-to-list 'org-latex-classes
               '("a4article" "\\documentclass[11pt,a4paper]{article}
      \\usepackage[hyperref,x11names]{xcolor}
      \\usepackage[colorlinks=true,urlcolor=SteelBlue4,linkcolor=Firebrick4]{hyperref}
      "
                  ("\\section{%s}" . "\\section*{%s}")
                  ("\\subsection{%s}" . "\\subsection*{%s}")
                  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                  ("\\paragraph{%s}" . "\\paragraph*{%s}")
                  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
      )
    #+END_SRC

*** hitec
    #+BEGIN_SRC emacs-lisp
(with-eval-after-load 'ox-latex

  (add-to-list 'org-latex-classes
             '("hitec"
             "\\documentclass{hitec}
               \\usepackage{graphicx}
               \\usepackage{parskip}
               \\usepackage{pstricks}
               \\usepackage{textcomp}
               \\usepackage[tikz]{bclogo}
               \\usepackage{listings}
               \\usepackage{fancyvrb}
               \\presetkeys{bclogo}{ombre=true,epBord=3,couleur = blue!15!white,couleurBord = red,arrondi = 0.2,logo=\bctrombone}{}
               \\usetikzlibrary{patterns}
               \\company{Kgtech}
               \\usepackage[hyperref,x11names]{xcolor}
               \\usepackage[colorlinks=true,urlcolor=SteelBlue4,linkcolor=Firebrick4]{hyperref}
               [NO-DEFAULT-PACKAGES]
               [NO-PACKAGES]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
)
    #+END_SRC

*** from koma
    #+BEGIN_SRC noemacs-lisp
(setq org-latex-classes nil)
(add-to-list 'org-latex-classes
          '("koma-article"
             "\\documentclass{scrartcl}"
             ("\\section{%s}" . "\\section*{%s}")
             ("\\subsection{%s}" . "\\subsection*{%s}")
             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
             ("\\paragraph{%s}" . "\\paragraph*{%s}")
             ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    #+END_SRC
*** koma try
    #+BEGIN_SRC noemacs-lisp

(require 'ox-koma-letter)

(eval-after-load 'ox-koma-letter
  '(progn
     (add-to-list 'org-latex-classes
                  '("my-letter"
                    "\\documentclass\{scrlttr2\}
     \\usepackage[english]{babel}
     \\setkomavar{frombank}{(1234)\\,567\\,890}
     \[DEFAULT-PACKAGES]
     \[PACKAGES]
     \[EXTRA]"))

     (setq org-koma-letter-default-class "my-letter")))

    #+END_SRC

*** from emacs-fu
    #+BEGIN_SRC noemacs-lisp
(add-to-list 'org-latex-classes
  '("djcb-org-article"
"\\documentclass[11pt,a4paper]{article}
\\usepackage[T1]{fontenc}
\\usepackage{graphicx}
\\usepackage{geometry}
\\geometry{a4paper, textwidth=6.5in, textheight=10in,
            marginparsep=7pt, marginparwidth=.6in}
\\pagestyle{empty}
\\title{}
      [NO-DEFAULT-PACKAGES]
      [NO-PACKAGES]"
     ("\\section{%s}" . "\\section*{%s}")
     ("\\subsection{%s}" . "\\subsection*{%s}")
     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
     ("\\paragraph{%s}" . "\\paragraph*{%s}")
     ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    #+END_SRC

** presentation
   #+BEGIN_SRC emacs-lisp
     (use-package ox-reveal
       :ensure ;TODO:
       :defer t
       :init
       (setq org-reveal-root "file:///~/.emacs.d/reveal.js")
       :commands (org-reveal-export-to-html org-reveal-export-to-html-and-browse)
       )

   #+END_SRC

* Pdf files
Emacs has the built-in DocView mode which lets me view Pdfs.
#+BEGIN_SRC emacs-lisp
(setq doc-view-continuous t)
#+END_SRC
* Editing Settings
** Always indent with spaces
   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
   #+END_SRC
** Wrap paragraphs automatically
   #+BEGIN_SRC emacs-lisp
     (add-hook 'text-mode-hook 'turn-on-auto-fill)
     (add-hook 'gfm-mode-hook 'turn-on-auto-fill)
     (add-hook 'org-mode-hook 'turn-on-auto-fill)
   #+END_SRC

** abbrev mode

   https://www.emacswiki.org/emacs/AbbrevMode

#+BEGIN_SRC emacs-lisp
  (setq abbrev-file-name             ;; tell emacs where to read abbrev
        "~/.emacs.d/abbrev_defs")    ;; definitions from...
  (setq save-abbrevs t)              ;; save abbrevs when files are saved
#+END_SRC
** markdown
   #+BEGIN_SRC noemacs-lisp
     (use-package markdown-mode
       :ensure t
       :init
       (add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
       )
   #+END_SRC
** Spell checking
   An automatic dictionary switcher for Emacs spell checking
   https://github.com/nschum/auto-dictionary-mode
   #+BEGIN_SRC emacs-lisp
      (use-package auto-dictionary
        :ensure t
        :init
          (add-hook 'flyspell-mode-hook (auto-dictionary-mode t))
      )
   #+END_SRC

** expand some words and auto-correct

   #+BEGIN_SRC emacs-lisp
     (define-key ctl-x-map "\C-i"
       #'endless/ispell-word-then-abbrev)

     (defun endless/simple-get-word ()
       (car-safe (save-excursion (ispell-get-word nil))))

     (defun endless/ispell-word-then-abbrev (p)
       "Call `ispell-word', then create an abbrev for it.
     With prefix P, create local abbrev. Otherwise it will
     be global.
     If there's nothing wrong with the word at point, keep
     looking for a typo until the beginning of buffer. You can
     skip typos you don't want to fix with `SPC', and you can
     abort completely with `C-g'."
       (interactive "P")
       (let (bef aft)
         (save-excursion
           (while (if (setq bef (endless/simple-get-word))
                      ;; Word was corrected or used quit.
                      (if (ispell-word nil 'quiet)
                          nil ; End the loop.
                        ;; Also end if we reach `bob'.
                        (not (bobp)))
                    ;; If there's no word at point, keep looking
                    ;; until `bob'.
                    (not (bobp)))
             (backward-word)
             (backward-char))
           (setq aft (endless/simple-get-word)))
         (if (and aft bef (not (equal aft bef)))
             (let ((aft (downcase aft))
                   (bef (downcase bef)))
               (define-abbrev
                 (if p local-abbrev-table global-abbrev-table)
                 bef aft)
               (message "\"%s\" now expands to \"%s\" %sally"
                        bef aft (if p "loc" "glob")))
           (user-error "No typo at or before point"))))

     (setq save-abbrevs 'silently)
     (setq-default abbrev-mode t)
   #+END_SRC

** better undo

   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :ensure t
       :diminish undo-tree-mode
       :bind* (("M-m u" . undo-tree-undo)
               ("M-m r" . undo-tree-redo)
               ("M-m U" . undo-tree-visualize))
       :config
       (global-undo-tree-mode 1))
   #+END_SRC

*** modal bindings + which-key explanations

    #+BEGIN_SRC emacs-lisp
      (modalka-define-kbd "u" "M-m u")
      (modalka-define-kbd "U" "M-m U")
      (modalka-define-kbd "r" "M-m r")

      (which-key-add-key-based-replacements
        "u" "undo"
        "r" "redo"
        "U" "undo tree")
    #+END_SRC

** Custom key-bindings

   Just some handy functions.

   #+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-w") 'backward-kill-word)
  (global-set-key (kbd "C-x C-k") 'kill-region)
  (global-set-key (kbd "M-/") 'hippie-expand)
  (global-set-key (kbd "M-o") 'other-window)
  (global-set-key (kbd "M-#") 'sort-lines)
  (global-set-key (kbd "C-c s") 'multi-term)
  (global-set-key (kbd "C-x g") 'magit-status)
  (global-set-key (kbd "C-<nSPC>") 'expand-abbrev)
  ;(global-set-key (kbd "s-f") 'projectile-grep) ; Win+f

  (defalias 'redo 'undo-tree-redo)
   #+END_SRC
** Cycle in the beginning of line


   #+BEGIN_SRC emacs-lisp
     (defun kgt::cycle-bol-boi ()
       "Cycle between beginning of line and beginning of indentation."
       (interactive)
       (let ((orig (point)))
         (back-to-indentation)
         (when (= orig (point))
           (move-beginning-of-line 1))))

     (global-set-key (kbd "C-a") 'kgt::cycle-bol-boi)

   #+END_SRC
** new line at the end
   Avoid reaching for the return key to add newlines!
   #+BEGIN_SRC emacs-lisp
     (setq next-line-add-newlines t)
   #+END_SRC
** Change region/till end of line

   Being almost always in Modalka mode implies I have to toggle it after deleting a region if I want to overwrite it. These functions, similar to the Vi style commands, let me delete and start typing in one swoop.

   #+BEGIN_SRC emacs-lisp
     (defun sk/change-region ()
       "delete and put me in Emacs state in one swoop"
       (interactive)
       (if (region-active-p)
           (let ((beg (region-beginning))
                 (end (region-end)))
             (kill-region beg end)))
       (modalka-mode 0))

     (defun sk/change-rest-of-line ()
       "delete till the end of line and put me in Emacs state in one swoop"
       (interactive)
       (kill-line)
       (modalka-mode 0))
   #+END_SRC

   Key binding, Modal binding & Which key modal explanation

   #+BEGIN_SRC emacs-lisp
     (bind-keys*
      ("M-m c" . sk/change-region)
      ("M-m C" . sk/change-rest-of-line))

     (modalka-define-kbd "c" "M-m c")
     (modalka-define-kbd "C" "M-m C")

     (which-key-add-key-based-replacements
       "c" "change region"
       "C" "change rest of line")
   #+END_SRC

* built-in browser
  #+BEGIN_SRC emacs-lisp
    (use-package eww
      :bind* (("M-m g x" . eww)
              ("M-m g :" . eww-browse-with-external-browser)
              ("M-m g #" . eww-list-histories)
              ("M-m g {" . eww-back-url)
              ("M-m g }" . eww-forward-url))
      :config
      (progn
        (add-hook 'eww-mode-hook 'visual-line-mode)))
  #+END_SRC
* rest-client
nice rest client to play with api

+ https://github.com/pashky/restclient.el
+ https://github.com/for-GET/know-your-http-well

#+BEGIN_SRC emacs-lisp

  (use-package restclient :ensure t)

  (use-package know-your-http-well :ensure t)

#+END_SRC
* Company-mode

https://www.emacswiki.org/emacs/CompanyMode#toc8

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :bind (("M-t"   . company-complete)
           ("C-c f" . company-files)
           ("M-/" . company-dabbrev) ; dabbrev is for local variables
           ("C-c d" . company-ispell)
           :map company-active-map
           ("C-n"    . company-select-next)
           ("C-p"    . company-select-previous)
           ([return] . company-complete-selection)
           ("C-w"    . backward-kill-word)
           ("C-c"    . company-abort)
           ("C-c"    . company-search-abort))
    :diminish (company-mode . "ς")
    :config
    (global-company-mode 1)
    (setq use-package-always-ensure     nil  ;; Disable completion from Company backend for use-package
          company-idle-delay            0.0  ;; 0.1 second delay before the pop-up appears
          company-minimum-prefix-length 2
          )
    (add-to-list 'company-backends 'company-restclient)
    )

  (use-package company-restclient :ensure t)

  (use-package company-tern
    :ensure t
    :bind (("C-c t" . company-tern))
    :init
    (setq company-tern-property-marker "")
    (setq company-tern-meta-as-single-line t)
    :config
    (add-to-list 'company-backends 'company-tern))

  (use-package company-web
    :ensure t
    :bind (("C-c w" . company-web-html))
    :config
    (add-to-list 'company-backends 'company-web-html))

  (setq company-dabbrev-downcase nil)

  (use-package company-quickhelp
    :ensure t
    :config
    (company-quickhelp-mode 1)
    (setq company-quickhelp-delay 0.1)
    )
#+END_SRC

* Coding
** Code documentation
   #+BEGIN_SRC emacs-lisp
     (use-package zeal-at-point
       :ensure t
       :bind (("C-c I" . zeal-at-point))
       :bind* (("M-m SPC i" . zeal-at-point)
               ("M-m SPC I" . zeal-at-point-search))
       :init
       ;(add-to-list 'zeal-at-point-mode-alist '(php-mode . "php"))
       )
   #+END_SRC

   Modal documentation and which-key explanations
   #+BEGIN_SRC emacs-lisp
     (modalka-define-kbd "SPC i" "M-m SPC i")
     (modalka-define-kbd "SPC I" "M-m SPC I")
     (modalka-define-kbd "I"     "C-c I")
     (which-key-add-key-based-replacements
       "I"     "info at point"
       "SPC i" "documentation prompt"
       "SPC I" "documentation at point")
   #+END_SRC

** silver search
   How could I work without it ?
   #+BEGIN_SRC emacs-lisp
     (use-package ag :ensure t)
   #+END_SRC
** dumb-jump

   #+BEGIN_SRC emacs-lisp
     (use-package dumb-jump
       :ensure t
       :init
       (dumb-jump-mode)
       (setq dumb-jump-aggressive nil)
       )
   #+END_SRC
** code folding
   #+BEGIN_SRC emacs-lisp
     (use-package origami :ensure t
       :commands (origami-toggle-node)
       :bind* (("M-m -" . origami-toggle-node)))
   #+END_SRC

** smartparens
   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
       :ensure t
       :bind* (("M-m m j" . sp-down-sexp)
               ("M-m m k" . sp-backward-up-sexp)
               ("M-m m h" . sp-backward-down-sexp)
               ("M-m m l" . sp-up-sexp)
               ("M-m m f" . sp-forward-sexp)
               ("M-m m b" . sp-backward-sexp)
               ("M-m m a" . sp-beginning-of-sexp)
               ("M-m m e" . sp-end-of-sexp)
               ("M-m m n" . sp-next-sexp)
               ("M-m m p" . sp-previous-sexp)
               ("M-m m >" . sp-forward-barf-sexp)
               ("M-m m <" . sp-backward-barf-sexp)
               ("M-m m )" . sp-forward-slurp-sexp)
               ("M-m m (" . sp-backward-slurp-sexp)
               ("M-m m x" . sp-transpose-sexp)
               ("M-m m d" . sp-kill-sexp)
               ("M-m m y" . sp-copy-sexp)
               ("M-m m u" . sp-unwrap-sexp)
               ("M-m m U" . sp-backward-unwrap-sexp)
               ("M-m m C" . sp-convolute-sexp)
               ("M-m m r" . sp-raise-sexp)
               ("M-m m s" . sp-split-sexp)
               ("M-m m S" . sp-splice-sexp)
               ("M-m m F" . sp-splice-sexp-killing-forward)
               ("M-m m B" . sp-splice-sexp-killing-backward)
               ("M-m m A" . sp-splice-sexp-killing-around))
       :diminish smartparens-mode
       :diminish smartparens-strict-mode
       :config
       (require 'smartparens-config)
       (smartparens-global-mode)
       (smartparens-global-strict-mode)
       (show-smartparens-global-mode)
       (which-key-add-key-based-replacements
         "M-m m" "move prefix"))
   #+END_SRC
*** Modal bindings
    #+BEGIN_SRC emacs-lisp
      (modalka-define-kbd "m j" "M-m m j")
      (modalka-define-kbd "m k" "M-m m k")
      (modalka-define-kbd "m h" "M-m m h")
      (modalka-define-kbd "m l" "M-m m l")
      (modalka-define-kbd "m f" "M-m m f")
      (modalka-define-kbd "m b" "M-m m b")
      (modalka-define-kbd "m a" "M-m m a")
      (modalka-define-kbd "m e" "M-m m e")
      (modalka-define-kbd "m n" "M-m m n")
      (modalka-define-kbd "m p" "M-m m p")
      (modalka-define-kbd "m >" "M-m m >")
      (modalka-define-kbd "m <" "M-m m <")
      (modalka-define-kbd "m )" "M-m m )")
      (modalka-define-kbd "m (" "M-m m (")
      (modalka-define-kbd "m x" "M-m m x")
      (modalka-define-kbd "m d" "M-m m d")
      (modalka-define-kbd "m y" "M-m m y")
      (modalka-define-kbd "m u" "M-m m u")
      (modalka-define-kbd "m U" "M-m m U")
      (modalka-define-kbd "m U" "M-m m U")
      (modalka-define-kbd "m U" "M-m m U")
      (modalka-define-kbd "m C" "M-m m C")
      (modalka-define-kbd "m r" "M-m m r")
      (modalka-define-kbd "m s" "M-m m s")
      (modalka-define-kbd "m S" "M-m m S")
      (modalka-define-kbd "m F" "M-m m F")
      (modalka-define-kbd "m B" "M-m m B")
      (modalka-define-kbd "m A" "M-m m A")
    #+END_SRC
*** which-key explanations
    #+BEGIN_SRC emacs-lisp
      (which-key-add-key-based-replacements
        "m" "move prefix"
        "m j" "move down"
        "m k" "move backward up"
        "m h" "move backward down"
        "m l" "move up"
        "m f" "move forward"
        "m b" "move backward"
        "m a" "move beginning"
        "m e" "move end"
        "m n" "move next"
        "m p" "move previous"
        "m >" "expression forward barf"
        "m <" "expression backward barf"
        "m )" "expression forward slurp"
        "m (" "expression backward slurp"
        "m x" "smart transpose"
        "m d" "smart delete"
        "m y" "smart copy"
        "m u" "selection unwrap"
        "m U" "backward unwrap"
        "m C" "convolute sexp"
        "m r" "raise sexp"
        "m s" "split sexp"
        "m S" "splice sexp"
        "m F" "splice forward"
        "m B" "splice backward"
        "m A" "splice around")
    #+END_SRC
** iedit
   Quick, fast edits of every symbol selected.
   #+BEGIN_SRC emacs-lisp
     (use-package iedit
       :ensure t
       :commands (iedit-mode)
       :bind* (("M-m *" . iedit-mode)))
   #+END_SRC
*** modalka binding
    #+BEGIN_SRC emacs-lisp
      (modalka-define-kbd "*" "M-m *")
    #+END_SRC
    which-key explanation

    #+BEGIN_SRC emacs-lisp
      (which-key-add-key-based-replacements
        "*" "multi edit all")
    #+END_SRC

** yasnippets

   The latest version of yasnippet doesn't play well with Org mode.
   #+BEGIN_SRC emacs-lisp
     (defun yas/org-very-safe-expand ()
       (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))
   #+END_SRC

   Tell org-mode to use that function
   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-holok
               (lambda ()
                 (make-variable-buffer-local 'yas/trigger-key)
                 (setq yas/trigger-key [tab])
                 (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
                 (define-key yas/keymap [tab] 'yas/next-field)))
   #+END_SRC


   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t
       :defer 30
       :bind (("C-o" . yas-insert-snippet))
       :diminish (yas-minor-mode . "γ"))
   #+END_SRC

                  ;(setq yas/triggers-in-field t); Enable nested triggering of snippets
                  ;(setq yas-prompt-functions '(yas-completing-prompt))
                  ;(add-hook 'snippet-mode-hook '(lambda () (setq-local require-final-newline nil)))


                                             ;(setq yas-fallback-behavior 'indent-line
                                             ;      yas-snippet-dirs '("~/.emacs.d/snippets/angular/")))

                                             ; https://github.com/magnars/angular-snippets.el
                                             ;(use-package angular-snippets :ensure t :defer 30)

            ;; (use-package php-auto-yasnippets
            ;; :config
            ;; (progn
            ;;   (setq php-auto-yasnippet-php-program
            ;;   (concat user-emacs-directory  "lisp/Create-PHP-YASnippet.php"))
            ;;   (define-key php-mode-map (kbd "C-c C-y") 'yas/create-php-snippet)
            ;; ))

** Highlight uncommitted changes
   #+BEGIN_SRC emacs-lisp
     (use-package diff-hl :ensure t
       :config
        (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
        (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
        (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode))
   #+END_SRC

** expand-region
   Expand region increases the selected region by semantic units. Just keep
   pressing the key until it selects what you want.

   some extra functions
   #+BEGIN_SRC emacs-lisp
     (defun sk/mark-inside-org-code ()
       "Select inside an Org code block without the org specific syntax"
       (interactive)
       (er/mark-org-code-block)
       (next-line 1)
       (exchange-point-and-mark)
       (previous-line 1)
       (end-of-line 1))

     (defun sk/mark-around-LaTeX-environment ()
       "Select around a LaTeX environment with both the begin and end keywords"
       (interactive)
       (er/mark-LaTeX-inside-environment)
       (previous-line 1)
       (exchange-point-and-mark)
       (next-line 1)
       (end-of-line 1))

     (defun sk/mark-around-word ()
       "Mark the word and the adjacent whitespace"
       (interactive)
       (er/mark-word)
       (exchange-point-and-mark)
       (forward-char 1))

     (defun sk/mark-around-text-paragraph ()
       "Mark the paragraph and the newline"
       (interactive)
       (er/mark-text-paragraph)
       (exchange-point-and-mark)
       (next-line 1))

     (defun sk/mark-inside-LaTeX-math ()
       "Mark inside the latex math"
       (interactive)
       (er/mark-LaTeX-math)
       (forward-char 1)
       (exchange-point-and-mark)
       (backward-char 1))

     (defun sk/mark-inside-python-block ()
       "Mark inside a python block"
       (interactive)
       (er/mark-python-block)
       (next-line 1))

     (defun sk/mark-inside-ruby-block ()
       "Mark inside a ruby/julia block"
       (interactive)
       (er/mark-ruby-block-up)
       (next-line 1)
       (exchange-point-and-mark)
       (previous-line 1))

     (defun sk/mark-around-symbol ()
       "Mark around a symbol including the nearby whitespace"
       (interactive)
       (er/mark-symbol)
       (exchange-point-and-mark)
       (forward-char 1))

   #+END_SRC

   We also add some helpful additional expand regions depending on the mode.
   #+BEGIN_SRC emacs-lisp
     (defun er/add-org-mode-expansions ()
       (make-variable-buffer-local 'er/try-expand-list)
       (setq er/try-expand-list (append
                                 er/try-expand-list
                                 '(mark-LaTeX-math))))
     (add-hook 'org-mode-hook 'er/add-org-mode-expansions)
   #+END_SRC

   (kbd "C-M-é") -> eval that with C-j in scratch buffer
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :ensure t
       :bind* (
               ([?\M-é] . er/expand-region)
               ([201326825] . er/contract-region)
               ("M-m a o" . er/mark-org-code-block)
               ("M-m a w" . sk/mark-around-word)
               ("M-m a p" . sk/mark-around-text-paragraph)
               ("M-m a f" . er/mark-defun)
               ("M-m a e" . sk/mark-around-LaTeX-environment)
               ("M-m a t" . er/mark-LaTeX-math)
               ("M-m a m" . er/mark-python-block)
               ("M-m a j" . er/mark-ruby-block-up)
               ("M-m a q" . er/mark-outside-quotes)
               ("M-m a b" . er/mark-outside-pairs)
               ("M-m a u" . er/mark-url)
               ("M-m a c" . er/mark-comment)
               ("M-m a v" . sk/mark-around-symbol)
               ("M-m i p" . er/mark-text-paragraph)
               ("M-m i f" . er/mark-defun)
               ("M-m i w" . er/mark-word)
               ("M-m i e" . er/mark-LaTeX-inside-environment)
               ("M-m i t" . sk/mark-inside-LaTeX-math)
               ("M-m i u" . er/mark-url)
               ("M-m i c" . er/mark-comment)
               ("M-m i b" . er/mark-inside-pairs)
               ("M-m i q" . er/mark-inside-quotes)
               ("M-m i o" . sk/mark-inside-org-code)
               ("M-m i m" . sk/mark-inside-python-block)
               ("M-m i j" . sk/mark-inside-ruby-block)
               ("M-m i v" . er/mark-symbol)))
   #+END_SRC

*** modalka bindings

    #+BEGIN_SRC emacs-lisp
      (modalka-define-kbd "a o" "M-m a o")
      (modalka-define-kbd "a w" "M-m a w")
      (modalka-define-kbd "a p" "M-m a p")
      (modalka-define-kbd "a f" "M-m a f")
      (modalka-define-kbd "a e" "M-m a e")
      (modalka-define-kbd "a t" "M-m a t")
      (modalka-define-kbd "a m" "M-m a m")
      (modalka-define-kbd "a j" "M-m a j")
      (modalka-define-kbd "a q" "M-m a q")
      (modalka-define-kbd "a b" "M-m a b")
      (modalka-define-kbd "a u" "M-m a u")
      (modalka-define-kbd "a c" "M-m a c")
      (modalka-define-kbd "a v" "M-m a v")
      (modalka-define-kbd "i p" "M-m i p")
      (modalka-define-kbd "i f" "M-m i f")
      (modalka-define-kbd "i w" "M-m i w")
      (modalka-define-kbd "i u" "M-m i u")
      (modalka-define-kbd "i t" "M-m i t")
      (modalka-define-kbd "i e" "M-m i e")
      (modalka-define-kbd "i c" "M-m i c")
      (modalka-define-kbd "i b" "M-m i b")
      (modalka-define-kbd "i q" "M-m i q")
      (modalka-define-kbd "i o" "M-m i o")
      (modalka-define-kbd "i m" "M-m i m")
      (modalka-define-kbd "i j" "M-m i j")
      (modalka-define-kbd "i v" "M-m i v")
    #+END_SRC

*** which-key explanations
    #+BEGIN_SRC emacs-lisp
      (which-key-add-key-based-replacements
        "a"   "expand around prefix"
        "a o" "expand an org block"
        "a w" "expand a word"
        "a p" "expand a para"
        "a f" "expand a func"
        "a e" "expand a latex env"
        "a t" "expand a latex math"
        "a m" "expand a python block"
        "a j" "expand a julia block"
        "a q" "expand a quote"
        "a b" "expand a pair"
        "a u" "expand a url"
        "a c" "expand a comment"
        "a v" "expand a variable"
        "i" "expand inside prefix"
        "i p" "expand in para"
        "i f" "expand in func"
        "i w" "expand in word"
        "i u" "expand in url"
        "i e" "expand in latex env"
        "i t" "expand in latex math"
        "i c" "expand in comment"
        "i b" "expand in pair"
        "i q" "expand in quote"
        "i o" "expand in org code"
        "i m" "expand in python block"
        "i j" "expand in julia block"
        "i v" "expand in symbol")
    #+END_SRC
** powerline

   #+BEGIN_SRC emacs-lisp
     (use-package powerline
     :ensure t
     :init
     (powerline-default-theme))
   #+END_SRC

** Yaml
   #+BEGIN_SRC emacs-lisp

     (use-package highlight-indentation :ensure t )
     (use-package smart-shift :ensure t )

     (use-package yaml-mode
       :ensure t
       :config
       (add-hook 'yaml-mode-hook 'highlight-indentation-mode)
       (add-hook 'yaml-mode-hook 'smart-shift-mode)
       :init
       (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
       (setq yaml-indent-offset 4)
                                             ;(add-hook '(point)hp-mode-hook (auto-fill-mode 0))
       )
   #+END_SRC
** PHP
    TODO = Read this : https://www.philnewton.net/guides/emacs-as-a-php-editor/
    this seems also interesting :
    https://github.com/aaronbieber/dotfiles/blob/master/configs/emacs.d/lisp/init-php.el

**** php-mode + hooks
     #+BEGIN_SRC emacs-lisp
              ;(use-package php-eldoc :ensure t)

              (use-package ede-php-autoload :ensure t)

              (use-package highlight-symbol :ensure t)

              (defun configure-php-mode ()
                "Set up all of my PHP mode preferences."
                (require 'newcomment)
                (setq auto-fill-function 'do-auto-fill)
                (setq flycheck-disabled-checkers '(php-phpmd))

                (when (boundp 'company-backends)
                  (setq-local company-backends
                       '((company-dabbrev-code
       ;                   php-extras-company
                          company-gtags
                          company-etags
                          company-keywords
                          ;company-ac-php-backend
                          ))))

                ;(when (fboundp 'php-extras-eldoc-documentation-function)
                ;  (add-function :before-until (local 'eldoc-documentation-function)
                ;                'php-extras-eldoc-documentation-function))

                ;(eldoc-mode t)
                (highlight-symbol-mode)
                (auto-fill-mode 0)
                (add-to-list 'write-file-functions 'delete-trailing-whitespace)
                ;(require 'ede)
                ;(global-ede-mode t)
                (ggtags-mode t)
                (ggtags-navigation-mode-cleanup but 1)
                (yas-minor-mode t)
                (origami-mode)

                )

              (defun my-php-mode-hook ()
                (setq indent-tabs-mode nil)
                (setq c-basic-offset 4)
                (setq php-template-compatibility nil)
                (setq php-manual-path "/usr/local/share/php/php-chunked-xhtml/")
                (subword-mode 1)
                (smartparens-mode t)
                (php-enable-symfony2-coding-style)
              )

              (use-package php-mode
                :ensure t
                :init
                (setq auto-mode-alist (append '(("\.php$" . php-mode)) auto-mode-alist))
                (add-hook 'php-mode-hook 'my-php-mode-hook)
                (add-hook 'php-mode-hook 'configure-php-mode)
                (add-hook 'php-mode-hook 'ede-php-autoload-mode)
                (with-eval-after-load 'php-mode
                  (require 'php-current)
                  (define-key php-mode-map (kbd "C-c C--") 'php-current-class)
                  (define-key php-mode-map (kbd "C-c C-=") 'php-current-namespace))
                )

              (use-package company-php
                :ensure t
                :config
                (progn
                  (add-hook 'php-mode-hook
                            '(lambda ()
                               (unless (executable-find "ctags")
                                 (error "Program: ctags is missing"))
                               (company-mode t)))
                  )
                )
     #+END_SRC

     config stolen here : https://github.com/ejmr/php-mode/issues/256

     #+BEGIN_SRC emacs-lisp

       (defun ofc/php-tags-find-at-point ()
         "When called on a FQN, it resolves its name and jumps to the file where it's defined.
       When called on anything else it forwards the call to a tag search function."
         (interactive)
         ;; Handle the switcheroo for PHP using the keybinding (i.e. bind
         ;; this to ofc/visit-class-file-at-point in php-mode-map.
         (unless (ofc/visit-class-file-at-point)
           (ofc/tags-find-at-point)))

       (defun ofc/tags-find-at-point ()
         "Finds the definitions of the symbol at poing using a tag file."
         (interactive)
         (if (featurep 'xref-find-definitions)
             (xref-find-definitions (thing-at-point 'sexp)))
         (error "Emacs 25 is required to use xref-find-definitions."))

       (defun ofc/visit-class-file-at-point ()
         "Maps a FQN into a file name using PHP autoload resolution."
         (interactive)
         ;; NOTE only useful in PHP.
         (let* ((class-name (replace-regexp-in-string "^\\\\" "" (thing-at-point 'sexp)))
                (class-file (ede-php-autoload-find-class-def-file (ede-current-project) class-name)))
           (message "looking up: %s" class-name)
           (when class-file
             (when (featurep 'xref-push-marker-stack)
               (xref-push-marker-stack))
             (find-file class-file))))

                                               ;       (global-ede-mode 1)
       (define-key php-mode-map (kbd "M-.") 'ofc/php-tags-find-at-point)

     #+END_SRC

**** Debugging

  https://www.mediawiki.org/wiki/MediaWiki-Vagrant/Advanced_usage#Emacs_with_geben

  #+BEGIN_SRC noemacs_lisp
  (autoload 'geben "geben" "PHP Debugger on Emacs" t)
  ; firebug shorcuts
  (eval-after-load 'geben
    '(progn
      (define-key geben-mode-map (kbd "<f8>") 'geben-run)
      (define-key geben-mode-map (kbd "<f10>") 'geben-step-over)
      (define-key geben-mode-map (kbd "<f11>") 'geben-step-into)
      (define-key geben-mode-map (kbd "S-<f11>") 'geben-step-out)))
  #+END_SRC

**** flycheck
     #+BEGIN_SRC emacs-lisp
       (require 'flycheck)
       (flycheck-define-checker php-phpcs
         "A PHP syntax checker using PHP_CodeSniffer.
           See URL `http://pear.php.net/package/PHP_CodeSniffer/'."
         :command ("phpcs" "--report=checkstyle" source)
         :error-parser flycheck-parse-checkstyle
         :modes php-mode)
     #+END_SRC
** Web-mode
   #+BEGIN_SRC emacs-lisp
     (use-package web-mode
       :ensure t
       :bind ("M-é" . web-mode-mark-and-expand)
       :init
       (add-to-list 'auto-mode-alist '("\\.md\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.twig\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))

       (setq web-mode-enable-css-colorization t)
       (setq web-mode-enable-current-element-highlight t)
       (setq web-mode-ac-sources-alist
             '(("css" . (ac-source-css-property))
               ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
       (setq web-mode-code-indent-offset 2)
       (setq web-mode-css-indent-offset 2)
       (setq web-mode-markup-indent-offset 2)
       ;; padding
       ;; For <style> parts
       (setq web-mode-style-padding 1)
       ;; For <script> parts
       (setq web-mode-script-padding 1)
       ;; For multi-line blocks
       (setq web-mode-block-padding 0)
       (setq web-mode-enable-auto-pairing nil)
       )

   #+END_SRC
** Javascript
   https://afsmnghr.github.io/emacs/angular/
   #+BEGIN_SRC emacs-lisp
     (use-package js2-mode :ensure t :defer ;TODO:
       :mode (("\\.js\\'" . js2-mode)
              ("\\.json\\'" . javascript-mode))
       :commands js2-mode
       :init (progn
               (setq-default js2-basic-offset 2
                             js2-indent-switch-body t
                             js2-auto-indent-p t
                             js2-global-externs '("angular")
                             js2-indent-on-enter-key t
;                             flycheck-disabled-checkers '(javascript-jshint)
;                             flycheck-checkers '(javascript-eslint)
                             flycheck-eslintrc "~/.eslintrc"))
               (add-to-list 'interpreter-mode-alist (cons "node" 'js2-mode))
               ;(add-to-list 'js2-mode-hook 'flycheck-mode)
               ;(add-to-list 'js2-mode-hook 'smartparens-mode)
             )
   #+END_SRC

   configure auto-complete with tern
   #+BEGIN_SRC emacs-lisp
     (use-package tern
       :ensure t :defer t
       :init (add-hook 'javascript-hook 'tern-mode)
       (add-to-list 'company-backends 'company-tern))
   #+END_SRC
*** Vue JS
    #+BEGIN_SRC emacs-lisp
      (use-package vue-mode
        :ensure t
        :config
        (add-to-list 'auto-mode-alist '("\\.vue\\'" . vue-mode)))
    #+END_SRC
** typescript
  #+BEGIN_SRC emacs-lisp
    (defun setup-tide-mode ()
      (interactive)
      (tide-setup)
      ;(flycheck-mode +1)
      (setq flycheck-check-syntax-automatically '(save mode-enabled))
      ;(eldoc-mode +1)
      (tide-hl-identifier-mode +1)
      ;; company is an optional dependency. You have to
      ;; install it separately via package-install
      ;; `M-x package-install [ret] company`
      (company-mode +1))

    (use-package tide
      :ensure t
      :init
      (add-hook 'before-save-hook 'tide-format-before-save)
      (add-hook 'typescript-mode-hook #'setup-tide-mode)
      (setq tide-format-options
            '(
              :insertSpaceAfterFunctionKeywordForAnonymousFunctions t :placeOpenBraceOnNewLineForFunctions nil)
            )
      )





  #+END_SRC

** less/sass/css
   #+BEGIN_SRC emacs-lisp
     (use-package less-css-mode :ensure t
       :mode ("\\.less\\'" . less-css-mode)
       )

     (use-package sass-mode
       :ensure t
       :mode "\\.sass\\'")

     (use-package scss-mode
       :ensure t
       :mode "\\.scss\\'"
       :init
       (setq scss-compile-at-save nil))
   #+END_SRC

   Nice to have tool (highlights color hexadecimal values with matching color)
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-mode
       :ensure t
       :init
       (dolist (hook '(css-mode-hook html-mode-hook sass-mode-hook))
         (add-hook hook 'rainbow-mode))
       )
   #+END_SRC

** Flycheck
   Read this : http://www.flycheck.org/en/latest/user/quickstart.html

   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :init
       (global-flycheck-mode t)
       (add-hook 'after-init-hook #'global-flycheck-mode)
     )

     (use-package flycheck-color-mode-line
       :ensure t
       :no-require t
       :config
       (add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode)
     )
     (use-package flycheck-pos-tip
       :ensure t
       :no-require t
       :config
       (add-hook 'flycheck-mode-hook 'flycheck-pos-tip-mode)
     )
   #+END_SRC
* git
** magit
   magit rocks !
   #+BEGIN_SRC emacs-lisp
     (use-package magit-gitflow
       :ensure t
     )

     (use-package magit
       :ensure t
       :init
       (setq magit-display-buffer-function
           #'magit-display-buffer-fullframe-status-v1)
       (add-hook 'magit-mode-hook 'turn-on-magit-gitflow)
       :config
       (setq magit-completing-read-function 'ivy-completing-read)
     )
   #+END_SRC

** git-timemachine
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :ensure t
    :commands (git-timemachine-toggle
               git-timemachine-switch-branch)
    :bind* (("M-m g l" . git-timemachine-toggle)
            ("M-m g L" . git-timemachine-switch-branch)))
#+END_SRC

** ediff

  Ediff mode is a UNIX patching tool and my version controlling
  package uses this to help resolve merge conflicts and having some
  better defaults will be useful for this.

https://www.gnu.org/software/emacs/manual/html_node/ediff/

#+BEGIN_SRC emacs-lisp
  (setq ediff-window-setup-function 'ediff-setup-windows-plain
        ediff-split-window-function 'split-window-horizontally)
#+END_SRC
* Sysadmin
** tramp mode
   #+BEGIN_SRC emacs-lisp
     (setq tramp-default-method "ssh"
           tramp-backup-directory-alist backup-directory-alist
           tramp-ssh-controlmaster-options "ssh")
   #+END_SRC
** Docker
   #+BEGIN_SRC emacs-lisp
     (use-package dockerfile-mode
       :ensure t
       :init
       (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))
     )
   #+END_SRC
* UI
** split window and move
   #+BEGIN_SRC emacs-lisp
     (defun mk/split-below-and-move ()
       (interactive)
       (split-window-below)
       (other-window 1))
     (defun mk/split-right-and-move ()
       (interactive)
       (split-window-right)
       (other-window 1))
   #+END_SRC

   + Keybindings
   #+BEGIN_SRC emacs-lisp
     (bind-keys
       ("C-x 2" . mk/split-below-and-move)
       ("C-x 3" . mk/split-right-and-move))
   #+END_SRC

** which key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :defer t
  :diminish which-key-mode
  :init
  (setq which-key-sort-order 'which-key-key-order-alpha)
  :bind* (("M-m ?" . which-key-show-top-level))
  :config
  (which-key-mode)
  (which-key-add-key-based-replacements
    "M-m ?" "top level bindings"))

#+END_SRC
** Appearance
   #+BEGIN_SRC emacs-lisp
     (global-font-lock-mode 1)
     (add-to-list 'default-frame-alist '(font . "-PfEd-Inconsolata-normal-normal-normal-*-15a-*-*-*-m-0-iso10646-1"))
     (set-frame-font "-PfEd-Inconsolata-normal-normal-normal-*-15a-*-*-*-m-0-iso10646-1")
     (tool-bar-mode 0)
     (setq-default fill-column 80)
     (when window-system (scroll-bar-mode -1))
   #+END_SRC
** ivy

 In MELPA, Ivy is split into three packages: ivy, swiper and counsel; you can
 simply install counsel which will bring in the other two as dependencies.

 #+BEGIN_SRC emacs-lisp

   (use-package ivy :ensure t
     :bind (("C-x C-b" . ivy-switch-buffer))
    )
   (use-package swiper :ensure t)


   (defun mk-ivy-partial-or-done ()
     (interactive)
     (or (ivy-partial)
         (ivy-alt-done)))

   (defun mk-ivy-open-current-directory ()
     (interactive)
     (when ivy--directory
       (let ((dir ivy--directory))
         (message (format "Open directory: %s" dir))
         (delete-minibuffer-contents)
         (ivy--done dir))))

   (use-package counsel
     :ensure t
     :init
     (ivy-mode 1)
     :config
     (setq ivy-use-virtual-buffers t)
     (setq ivy-count-format "(%d/%d) ")
     (global-set-key (kbd "C-s") 'swiper)
     (global-set-key (kbd "M-x") 'counsel-M-x)
     (global-set-key (kbd "C-x C-f") 'counsel-find-file)
     (global-set-key (kbd "<f1> f") 'counsel-describe-function)
     (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
     (global-set-key (kbd "<f1> l") 'counsel-find-library)
     (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
     (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
     (global-set-key (kbd "C-c C-r") 'ivy-resume)

     (setq ivy-re-builders-alist
      '((swiper            . ivy--regex-plus)
        (ivy-switch-buffer . ivy--regex-fuzzy)
        (t                 . ivy--regex-fuzzy)))

     ;; (setq ivy-re-builders-alist
     ;;  '((t . ivy--regex-fuzzy)))

     ;(setq ivy-re-builders-alist
     ;      '((read-file-name-internal . ivy--regex-fuzzy)
     ;        (t . ivy--regex-plus)))

     (define-key ivy-minibuffer-map (kbd "TAB") 'mk-ivy-partial-or-done)
     (define-key ivy-minibuffer-map (kbd "<return>") 'ivy-alt-done)
     (define-key ivy-minibuffer-map (kbd "C-f") 'mk-ivy-open-current-directory)
     (setq ivy-extra-directories nil)

     (global-set-key (kbd "C-c g") 'counsel-git)
     (global-set-key (kbd "C-c j") 'counsel-git-grep)
     (global-set-key (kbd "C-c k") 'counsel-ag)
   )
   (use-package ivy-hydra :ensure t)
 #+END_SRC

While we're here, let's also increase recentf's items

#+BEGIN_SRC emacs-lisp
  (setq recentf-max-menu-items 100)
#+END_SRC

** avy
   Avy lets you jump anywhere on screen based on character, characters, lines or
   words. Amazing !
   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :ensure t
       :init
       (setq avy-keys-alist
             `((avy-goto-char-timer . (?j ?k ?l ?f ?s ?d ?e ?r ?u ?i))
               (avy-goto-line . (?j ?k ?l ?f ?s ?d ?e ?r ?u ?i))))
       (setq avy-style 'pre)
       :bind* (("M-z" . ace-jump-mode)
                                             ;("M-z" . avy-goto-char-timer)
               ("M-m z" . avy-goto-line)))
   #+END_SRC
** smex
#+BEGIN_SRC emacs-lisp
(use-package smex
  :ensure t
  :config
  (smex-initialize))

#+END_SRC
** hydra
   #+BEGIN_SRC emacs-lisp
       (use-package hydra :ensure t)
                                               ; an example
       (defhydra hydra-zoom (global-map "<f2>")
         "zoom"
         ("g" text-scale-increase "in")
         ("l" text-scale-decrease "out"))


       (global-set-key
        (kbd "C-S-f")
        (defhydra hydra-folding (:color red)
          "
         _o_pen node    _n_ext fold       toggle _f_orward
         _c_lose node   _p_revious fold   toggle _r_ecursively
         "
          ("o" origami-open-node)
          ("c" origami-close-node)
          ("n" origami-next-fold)
          ("p" origami-previous-fold)
          ("f" origami-forward-toggle-node)
          ("r" origami-recursively-toggle-node)
          ))
   #+END_SRC

** Terminal
   #+BEGIN_SRC emacs-lisp
        (require 'multi-term)
        (setq multi-term-program "/bin/bash")

     (add-hook 'term-mode-hook
               (lambda ()
                 (goto-address-mode)
                 (define-key term-raw-map (kbd "M-o") 'other-window)
               ))
   #+END_SRC
** Session
   Saving Emacs Sessions
   #+BEGIN_SRC emacs-lisp
;     (desktop-save-mode 1)
;     (setq desktop-restore-eager 5)
;     (setq desktop-save t)
   #+END_SRC

** Custom solarized-dark theme

   #+BEGIN_SRC emacs-lisp
     (setq solarized-use-variable-pitch nil)
     (setq solarized-height-plus-1 1.0)
     (setq solarized-height-plus-2 1.0)
     (setq solarized-height-plus-3 1.0)
     (setq solarized-height-plus-4 1.0)
     (setq solarized-high-contrast-mode-line t)

     (if (daemonp)
         (add-hook 'after-make-frame-functions
                   (lambda (frame)
                     (with-selected-frame frame
                       (load-theme 'solarized-dark t))))
       (load-theme 'solarized-dark t))

     ;; (add-hook 'after-init-hook
     ;;           (lambda ()
     ;;             (when window-system (load-theme 'solarized-dark t))))


   #+END_SRC

** Highlight the current line

   =global-hl-line-mode= softly highlights the background color of the line
   containing point. It makes it a bit easier to find point, and it's useful when
   pairing or presenting code.

   #+BEGIN_SRC emacs-lisp
     (when window-system
       (global-hl-line-mode))
   #+END_SRC

** Windmove
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c C-<left>")  'windmove-left)
     (global-set-key (kbd "C-c C-<right>") 'windmove-right)
     (global-set-key (kbd "C-c C-<up>")    'windmove-up)
     (global-set-key (kbd "C-c C-<down>")  'windmove-down)
   #+END_SRC
** winner-mode
   Winner mode is an Emacs built-in package that lets you undo and redo window
   configurations. Incredibly useful since I keep splitting and merging windows
   all the time. Let’s enable it.
   #+BEGIN_SRC emacs-lisp
     (winner-mode 1)
   #+END_SRC

** Toggle zoom

#+BEGIN_SRC emacs-lisp
(use-package zoom-window
  :ensure t
  :bind* (("M-m Z" . zoom-window-zoom)))
#+END_SRC

** ido
*** ido itself
    #+BEGIN_SRC noemacs-lisp
      (ido-mode 1)
      (ido-everywhere 1)
    #+END_SRC

*** ido ubiquitous
    #+BEGIN_SRC noemacs-lisp
      (use-package ido-ubiquitous
        :ensure t
        :init
        (ido-ubiquitous-mode 1)
      )
    #+END_SRC

*** vertical mode
    Makes ido-mode display vertically.
    #+BEGIN_SRC noemacs-lisp
      (require 'ido-vertical-mode)
      (ido-mode 1)
      (ido-vertical-mode 1)
      ;(setq ido-vertical-define-keys 'C-n-and-C-p-only)
      (setq ido-vertical-define-keys 'C-n-C-p-up-and-down)
    #+END_SRC
*** flx-ido
    #+BEGIN_SRC noemacs-lisp
      (require 'flx-ido)

      (flx-ido-mode 1)
      ; disable ido faces to see flx highlights.
      (setq ido-enable-flex-matching t)
      (setq ido-use-faces nil)
    #+END_SRC
** buffers
   #+BEGIN_SRC emacs-lisp
     (use-package ace-jump-mode
       :ensure t
       :init
        (setq ajb-bs-configuration "projectile")
       )
   #+END_SRC

* Projectile + perspective
** perspective

#+BEGIN_SRC emacs-lisp
(use-package perspective :ensure t
  :config
  (persp-mode))
#+END_SRC

** projectile

  Projectile's default binding of =projectile-ag= to =C-c p s s= is clunky
  enough that I rarely use it (and forget it when I need it). This binds the
  easier-to-type =C-c C-v= and =C-c v= to useful searches.

  counsel-projectile-find-file left aside for now

  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :ensure t
      :bind* (("M-m p f"   . projectile-find-file)
              ("M-m p p"   . projectile-switch-project)
              ("M-m p TAB" . projectile-find-other-file))

      :bind (("C-c C-p" . projectile-command-map))

      :init
      (setq projectile-switch-project-action 'projectile-dired)
      (setq projectile-completion-system 'ivy)
      :config
      (projectile-global-mode))


    (use-package counsel-projectile
      :ensure t
      :bind (("C-x C-," . projectile-switch-to-buffer)
             ("C-x C-;" . counsel-projectile-find-file))
      )
  #+END_SRC

*** modalka bindings
    #+BEGIN_SRC emacs-lisp
      (modalka-define-kbd "SPC d"   "M-m p f")
      (modalka-define-kbd "SPC p"   "M-m p p")
      (modalka-define-kbd "SPC TAB" "M-m p TAB")

      (which-key-add-key-based-replacements
        "SPC p"   "project switch"
        "SPC TAB" "alternate file"
        "SPC f"   "open-file in project")
    #+END_SRC
** persp-projectile

   #+BEGIN_SRC emacs-lisp
     (use-package persp-projectile
       :ensure t
  ;     :defer 1
       :bind (("C-c p p" . projectile-persp-switch-project))
       :config
       (persp-mode)
       )
   #+END_SRC
** frame naming & projectile
   #+BEGIN_SRC emacs-lisp
     (use-package nameframe :ensure t)
     (use-package nameframe-projectile :ensure t
      :bind ("M-p" . nameframe-switch-frame)
      :config
      (nameframe-projectile-mode t)
     )
   #+END_SRC
* Dired
  Load up the assorted dired extensions.

  #+BEGIN_SRC emacs-lisp
    (use-package dired+
      :ensure t)
    (use-package dired-open
      :ensure t)
  #+END_SRC

  Kill buffers of files/directories that are deleted in dired.
  #+BEGIN_SRC emacs-lisp
    (setq dired-clean-up-buffers-too t)
  #+END_SRC

  Always copy directories recursively instead of asking every time.
  #+BEGIN_SRC emacs-lisp
    (setq dired-recursive-copies 'always)
  #+END_SRC

  Ask before recursively deleting a directory, though.
  #+BEGIN_SRC emacs-lisp
    (setq dired-recursive-deletes 'top)
  #+END_SRC

  Quickly copy file from window to window
  #+BEGIN_SRC emacs-lisp
    (setq dired-dwim-target t)
  #+END_SRC
* touch typing
  need a break ?
  #+BEGIN_SRC emacs-lisp
    (use-package typit
      :ensure t
      :commands (typit))
  #+END_SRC
* Online help
** how do I ?
#+BEGIN_SRC emacs-lisp
  (use-package howdoi
    :ensure t
    :bind* (("M-m g Y"   . howdoi-query)
            ("M-m SPC y" . howdoi-query-line-at-point)
            ("M-m SPC Y" . howdoi-query-insert-code-snippet-at-point)))
#+END_SRC
** Stack Exchange
   #+BEGIN_SRC emacs-lisp
  (use-package sx :ensure t)
   #+END_SRC
* Local configuration
  #+BEGIN_SRC emacs-lisp
    (when (file-exists-p (concat user-emacs-directory "local.org"))
      (org-babel-load-file (concat user-emacs-directory "local.org")))
  #+END_SRC
