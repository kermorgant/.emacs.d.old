
* Use sensible-defaults.el

Use [[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el]] for some basic settings.

#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/sensible-defaults.el")
  (sensible-defaults/use-all-settings)
  (sensible-defaults/use-all-keybindings)
#+END_SRC

* Set personal information

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Mikael Kermorgant"
        user-mail-address "mikael@kgtech.fi"
        calendar-latitude 59.97
        calendar-longitude 23.44
        calendar-location-name "Raseborg, Finland")
#+END_SRC

* Packages repositories

http://ergoemacs.org/emacs/emacs_package_system.html

#+BEGIN_SRC emacs-lisp
 (when (>= emacs-major-version 24)
   (require 'package)
   (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/")  t)


(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
   (package-initialize))

  (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
  (add-to-list 'load-path "#/.emacs.d/lisp")
#+END_SRC

* Utilities functions
#+BEGIN_SRC emacs-lisp
(defun hrs/split-window-below-and-switch ()
  "Split the window horizontally, then switch to the new pane."
  (interactive)
  (split-window-below)
  (other-window 1))

(defun hrs/split-window-right-and-switch ()
  "Split the window vertically, then switch to the new pane."
  (interactive)
  (split-window-right)
  (other-window 1))
#+END_SRC

* Editing Settings
** Always indent with spaces
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC
** Wrap paragraphs automatically
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'turn-on-auto-fill)
(add-hook 'gfm-mode-hook 'turn-on-auto-fill)
(add-hook 'org-mode-hook 'turn-on-auto-fill)
#+END_SRC

** Spell checking
   An automatic dictionary switcher for Emacs spell checking
   https://github.com/nschum/auto-dictionary-mode
#+BEGIN_SRC emacs-lisp
(require 'auto-dictionary)
(add-hook 'flyspell-mode-hook (lambda () (auto-dictionary-mode t)))
#+END_SRC

** better undo
   #+BEGIN_SRC emacs-lisp
(require 'undo-tree)
(global-undo-tree-mode 1)
   #+END_SRC
** Custom key-bindings
   Just some handy functions.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-w") 'backward-kill-word)
  (global-set-key (kbd "C-x C-k") 'kill-region)
  (global-set-key (kbd "M-/") 'hippie-expand)
  (global-set-key (kbd "M-o") 'other-window)
  (global-set-key (kbd "M-#") 'sort-lines)
  (global-set-key (kbd "C-c s") 'multi-term)
  (global-set-key (kbd "C-x g") 'magit-status)
  (global-set-key (kbd "C-<nSPC>") 'expand-abbrev)

(defalias 'redo 'undo-tree-redo)
;(global-set-key (kbd "C-z") 'undo) ; 【Ctrl+z】
;(global-set-key (kbd "C-y") 'redo) ; 【Ctrl+y】; Microsoft Windows style
#+END_SRC
* Mail with emacs
** incoming mails
   config found here :
   https://martinralbrecht.wordpress.com/2016/05/30/handling-email-with-emacs/

   imapnotify speaks imap idle with server.
   #+BEGIN_SRC emacs-lisp
(server-start)
(use-package prodigy
  :ensure t
  :init (prodigy-define-tag
          :name 'email
          :ready-message "Checking Email using IMAP IDLE. Ctrl-C to shutdown.")
  (prodigy-define-service
    :name "imapnotify"
    :command "imapnotify"
    :args (list "-c" (expand-file-name "~/.emacs.d/imapnotify.gmail.js" (getenv "HOME")))
    :tags '(email)
    :kill-signal 'sigkill))
   #+END_SRC
** M4ue config
*** global settings
    #+BEGIN_SRC emacs-lisp
(require 'mu4e)

(global-set-key (kbd "C-c m") 'mu4e)
(setq mu4e-maildir (expand-file-name "~/mbsync"))
(setq mu4e-attachment-dir  "~/Downloads/Attachments")
(setq mu4e-headers-skip-duplicates t)

;;rename files when moving - NEEDED FOR MBSYNC
(setq mu4e-change-filenames-when-moving t)

;;set up queue for offline email
;;use mu mkdir  ~/Maildir/queue to set up first
(setq smtpmail-queue-mail nil  ;; start in normal mode
      smtpmail-queue-dir   "~/mbsync/gmail/queue/cur")

(setq message-kill-buffer-on-exit t)

;; spell check
(add-hook 'mu4e-compose-mode-hook
         (defun my-do-compose-stuff ()
            "My settings for message composition."
            (set-fill-column 72)
            (flyspell-mode)))
    #+END_SRC

*** editor config
    #+BEGIN_SRC emacs-lisp

; html mails with w3m
(setq mu4e-html2text-command "w3m -T text/html -o auto_image=TRUE ")

; view images inline
(setq mu4e-view-show-images t)
(when (fboundp 'imagemagick-register-types)
  (imagemagick-register-types))

(add-to-list 'mu4e-view-actions
  '("ViewInBrowser" . mu4e-action-view-in-browser) t)

(defun my-mu4e-action-view-with-xwidget (msg)
  "View the body of the message inside xwidget-webkit."
  (unless (fboundp 'xwidget-webkit-browse-url)
    (mu4e-error "No xwidget support available"))
  (let* ((html (mu4e-message-field msg :body-html))
          (txt (mu4e-message-field msg :body-txt))
          (tmpfile (format "%s%x.html" temporary-file-directory (random t))))
    (unless (or html txt)
      (mu4e-error "No body part for this message"))
    (with-temp-buffer
      ;; simplistic -- but note that it's only an example...
      (insert (or html (concat "<pre>" txt "</pre>")))
      (write-file tmpfile)
      (xwidget-webkit-browse-url (concat "file://" tmpfile) t))))

(add-to-list 'mu4e-view-actions
  '("xViewXWidget" . my-mu4e-action-view-with-xwidget) t)
    #+END_SRC

*** kgtech config
    #+BEGIN_SRC emacs-lisp
    (setq  kgtech-mu4e-context
        (make-mu4e-context
	  :name "Kgtech"
	  :enter-func (lambda () (mu4e-message "Switch to the Kgtech context"))
	  ;; leave-fun not defined
	  :match-func (lambda (msg)
			(when msg
			  (mu4e-message-contact-field-matches msg
			    :to "@kgtech.fi")))
	  :vars '( (user-mail-address	     . "mikael@kgtech.fi." )
		   (user-full-name	    . "Mikael Kermorgant" )
		   (mu4e-compose-signature . (concat "Mikael Kermorgant"))
                   (mu4e-drafts-folder .     "/kgtech/Drafts")
                   (mu4e-sent-folder   .     "/kgtech/Sent")
                   (mu4e-trash-folder  .     "/kgtech/Trash")
                   (mu4e-get-mail-command  . "mbsync kgtech")
                   (mu4e-maildir-shortcuts .
                     (("/kgtech/Inbox"               . ?i)
                      ("/kgtech/Sent"                . ?s)
                      ("/kgtech/Clients"             . ?c)
                      ("/kgtech/Trash"               . ?t)
                      ("/kgtech/Drafts"              . ?d))
                   )
    )))

   (setq mu4e-compose-signature
    (concat
      "Mikael Kermorgant\n"
      "https://www.kgtech.fi\n"
      "╦╔═╔═╗╔╦╗┌─┐┌─┐┬ ┬\n"
      "╠╩╗║ ╦ ║ ├┤ │  ├─┤\n"
      "╩ ╩╚═╝ ╩ └─┘└─┘┴ ┴\n"))
    #+END_SRC

*** gmail config
    #+BEGIN_SRC emacs-lisp
    (setq  gmail-mu4e-context
        (make-mu4e-context
	  :name "gmail"
	  :enter-func (lambda () (mu4e-message "Switch to the Private context"))
	  ;; leave-func not defined
	  :match-func (lambda (msg)
			(when msg
			  (mu4e-message-contact-field-matches msg
			    :to "mikael.kermorgant@gmail.com")))
	  :vars '( (user-mail-address	   . "mikael.kermorgant@gmail.com"  )
		   (user-full-name	   . "Mikael Kermorgant" )
		   (mu4e-compose-signature . (concat "--\n" "Mikael Kermorgant"))
                   (mu4e-drafts-folder .     "/gmail/[Gmail].Drafts")
                   (mu4e-sent-folder   .     "/gmail/[Gmail].Sent Mail")
                   (mu4e-trash-folder  .     "/gmail/[Gmail].Trash")
                   (mu4e-headers-skip-duplicates . t)
                   (mu4e-get-mail-command  . "mbsync gmail")
                   (mu4e-maildir-shortcuts .
                     (("/gmail/INBOX"               . ?i)
                      ("/gmail/[Gmail]/Starred"     . ?S)
                      ("/gmail/[Gmail].Sent Mail"   . ?s)
                      ("/gmail/[Gmail].Trash"       . ?t)
                      ("/gmail/[Gmail].All Mail"    . ?a)))
                   (mu4e-sent-messages-behavior 'delete)
       )))
  (setq mu4e-compose-context-policy nil)


    #+END_SRC

*** contexts setup
    #+BEGIN_SRC emacs-lisp
  (setq mu4e-contexts
    `( ,gmail-mu4e-context
       ,(make-mu4e-context
	  :name "Yahoo"
	  :enter-func (lambda () (mu4e-message "Switch to the Yahoo context"))
	  ;; leave-fun not defined
	  :match-func (lambda (msg)
			(when msg
			  (mu4e-message-contact-field-matches msg
			    :to "mikael.kermorgant@yahoo.fr")))
	  :vars '( (user-mail-address	     . "mikael.kermorgant@yahoo.fr." )
		   (user-full-name	    . "Mikael Kermorgant" )
		   (mu4e-compose-signature . (concat "Mikael Kermorgant"))
                   (mu4e-drafts-folder .     "/yahoo/drafts")
                   (mu4e-sent-folder   .     "/yahoo/sent")
                   (mu4e-trash-folder  .     "/yahoo/trash")
                   (mu4e-get-mail-command  . "mbsync yahoo")
                   (mu4e-maildir-shortcuts .
                     (("/yahoo/Inbox"               . ?i))
                   )

      ))
      , kgtech-mu4e-context
))

  ;; set `mu4e-context-policy` and `mu4e-compose-policy` to tweak when mu4e should
  ;; guess or ask the correct context, e.g.

  ;; start with the first (default) context;
  ;; default is to ask-if-none (ask when there's no context yet, and none match)
  ;; (setq mu4e-context-policy 'pick-first)

  ;; compose with the current context is no context matches;
  ;; default is to ask
    #+END_SRC

** msmtp

#+BEGIN_SRC emacs-lisp
; use msmtp
(setq message-send-mail-function 'message-send-mail-with-sendmail)
(setq sendmail-program "/usr/bin/msmtp")
; tell msmtp to choose the SMTP server according to the from field in the outgoing email
(setq message-sendmail-extra-arguments '("--read-envelope-from"))
(setq message-sendmail-f-is-evil 't)
#+END_SRC

** org-mode integration
#+BEGIN_SRC emacs-lisp
;;store org-mode links to messages
(require 'org-mu4e)

;;store link to message if in header view, not to header query
(setq org-mu4e-link-query-in-headers-mode nil)

(add-hook 'message-mode-hook 'orgstruct++-mode 'append)
(add-hook 'message-mode-hook 'turn-on-auto-fill 'append)
;(add-hook 'message-mode-hook 'org-bullets-mode 'append)
;(add-hook 'message-mode-hook 'orgtbl-mode 'append)
(add-hook 'message-mode-hook 'auto-complete-mode 'append)
#+END_SRC

* Coding
** Flycheck
Read this : http://www.flycheck.org/en/latest/user/quickstart.html

#+BEGIN_SRC emacs-lisp

(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))

(add-hook 'markdown-mode-hook #'flycheck-mode)
(add-hook 'gfm-mode-hook #'flycheck-mode)
(add-hook 'text-mode-hook #'flycheck-mode)
(add-hook 'org-mode-hook #'flycheck-mode)

;(add-hook 'after-init-hook #'global-flycheck-mode)
#+END_SRC

** Yaml
#+BEGIN_SRC emacs-lisp
(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
#+END_SRC

** Webdev
*** PHP coding stuff
**** php-mode + hooks
 #+BEGIN_SRC emacs-lisp
 (require 'php-mode)

 (setq auto-mode-alist (append '(("\.php$" . php-mode)) auto-mode-alist))
 (eval-after-load 'php-mode '(require 'php-ext))
 ;(eval-after-load 'php-mode '(require 'company-php))

(defun my-php-mode-hook ()
;;  (auto-complete-mode t)
;;  (setq ac-sources  '(ac-source-php ) )
;;  (require 'ac-php)
  (setq indent-tabs-mode nil)
  (setq c-basic-offset 2)
  (setq php-template-compatibility nil)
  (setq php-manual-path "/usr/local/share/php/php-chunked-xhtml/")
  (subword-mode 1)
  (company-mode t)
  (ac-config-default)

  (setq ac-auto-start 3)
  (setq ac-expand-on-auto-complete t)
;  (ac-set-trigger-key "TAB")
 ; (setq ac-use-quick-help nil)

;  (setq ac-expand-on-auto-complete t)
  (php-enable-symfony2-coding-style)
 ; (add-to-list 'company-backends 'company-ac-php-backend)
  ;(define-key php-mode-map  (kbd "C-SPC") 'company-complete )
)

(add-hook 'php-mode-hook 'my-php-mode-hook)

;  (add-hook 'php-mode-hook
;            '(lambda ()
;               (auto-complete-mode t)
;               (require 'ac-php)
;               (setq ac-sources  '(ac-source-php ) )
;               (yas-global-mode 1)
;               (define-key php-mode-map  (kbd "C-=") 'ac-php-find-symbol-at-point)   ;goto define
;               (define-key php-mode-map  (kbd "C-t") 'ac-php-location-stack-back   ) ;go back
;               ))

 (add-hook 'php-mode-hook
           '(lambda ()
	      (require 'company-php)
	      (company-mode t)
              (add-to-list 'company-backends 'company-ac-php-backend
              (define-key php-mode-map  (kbd "C-SPC") 'company-complete )
	      ))
  )

 (add-hook 'php-mode-hook
           '(lambda ()
	      (when (derived-mode-p 'php-mode)
		(ggtags-mode 1))
	      )
	   )
 (add-hook 'php-mode-hook
	   '(lambda ()
	      (add-to-list 'write-file-functions 'delete-trailing-whitespace))
	   )
 #+END_SRC

#+BEGIN_SRC emacs-lisp
(require 'php-auto-yasnippets)
(define-key php-mode-map (kbd "C-c C-y") 'yas/create-php-snippet)
#+END_SRC
**** Debugging

 https://www.mediawiki.org/wiki/MediaWiki-Vagrant/Advanced_usage#Emacs_with_geben

 #+BEGIN_SRC emacs_lisp
 (autoload 'geben "geben" "PHP Debugger on Emacs" t)
 ; firebug shorcuts
 (eval-after-load 'geben
   '(progn
     (define-key geben-mode-map (kbd "<f8>") 'geben-run)
     (define-key geben-mode-map (kbd "<f10>") 'geben-step-over)
     (define-key geben-mode-map (kbd "<f11>") 'geben-step-into)
     (define-key geben-mode-map (kbd "S-<f11>") 'geben-step-out)))
 #+END_SRC

*** Web-mode
#+BEGIN_SRC emacs-lisp
 (require 'web-mode)

 (add-to-list 'auto-mode-alist '("\\.md\\'" . web-mode))
 (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
 (add-to-list 'auto-mode-alist '("\\.html.twig\\'" . web-mode))
 (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))

 (setq web-mode-enable-css-colorization t)
 (setq web-mode-enable-current-element-highlight t)
 (setq web-mode-ac-sources-alist
   '(("css" . (ac-source-css-property))
     ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
 (setq web-mode-code-indent-offset 2)
 (setq web-mode-css-indent-offset 2)
 (setq web-mode-markup-indent-offset 2)
 ;; padding
 ;; For <style> parts
 (setq web-mode-style-padding 1)
 ;; For <script> parts
 (setq web-mode-script-padding 1)
 ;; For multi-line blocks
 (setq web-mode-block-padding 0)
#+END_SRC
*** CSS & SCSS
 #+BEGIN_SRC emacs-lisp
 (add-hook 'css-mode-hook
           (lambda ()
           (rainbow-mode)
           (setq css-indent-offset 2)))
 (autoload 'scss-mode "scss-mode")
 (add-to-list 'auto-mode-alist '("\\.scss\\'" . scss-mode))
 #+END_SRC

*** Javascript

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
#+END_SRC
** Projectile

Projectile's default binding of =projectile-ag= to =C-c p s s= is clunky enough
that I rarely use it (and forget it when I need it). This binds the
easier-to-type =C-c C-v= and =C-c v= to useful searches.

#+BEGIN_SRC emacs-lisp
  (defun hrs/search-project-for-symbol-at-point ()
    "Use `projectile-ag' to search the current project for `symbol-at-point'."
    (interactive)
    (projectile-ag (projectile-symbol-at-point)))

  (global-set-key (kbd "C-c v") 'projectile-ag)
  (global-set-key (kbd "C-c C-v") 'hrs/search-project-for-symbol-at-point)

  (setq projectile-switch-project-action 'neotree-projectile-action)

  ;;(setq projectile-keymap-prefix (kbd "C-c C-p"))

  (projectile-global-mode)
#+END_SRC


#+BEGIN_SRC emacs-lisp

;(persp-mode)

;(require 'persp-projectile)
;(define-key projectile-mode-map (kbd "s-s") 'projectile-persp-switch-project)
#+END_SRC

* Sysadmin
** Docker
#+BEGIN_SRC emacs-lisp
(require 'dockerfile-mode)
(add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))
#+END_SRC
* UI
** Terminal
#+BEGIN_SRC emacs-lisp
   (require 'multi-term)
   (setq multi-term-program "/bin/bash")

(add-hook 'term-mode-hook
          (lambda ()
            (goto-address-mode)
            (define-key term-raw-map (kbd "M-o") 'other-window)
          ))
#+END_SRC

** Appearance
#+BEGIN_SRC emacs-lisp
(global-font-lock-mode 1)
(tool-bar-mode 0)
(setq-default fill-column 80)
(when window-system
  (scroll-bar-mode -1))
#+END_SRC
** Session
Saving Emacs Sessions
#+BEGIN_SRC emacs-lisp
(desktop-save-mode 1)

; this one lets elscreen-persist do the "save buffer" job
(setq desktop-files-not-to-save "")
#+END_SRC

** Neotree

#+BEGIN_SRC emacs-lisp
(require 'neotree)

(defun neotree-project-dir ()
  "Open NeoTree using the git root."
  (interactive)
  (let ((project-dir (projectile-project-root))
	(file-name (buffer-file-name)))
    (if project-dir
	(if (neotree-toggle)
	    (progn
	      (neotree-dir project-dir)
	      (neotree-find file-name)))
      (message "Could not find git project root."))))

(global-set-key [f8] 'neotree-project-dir)

;(global-set-key [f8] 'neotree-toggle)
(setq neo-smart-open t)
(setq neo-window-width 40)

   (setq projectile-switch-project-action 'neotree-projectile-action)
 #+END_SRC

** Custom solarized-dark theme


#+BEGIN_SRC emacs-lisp

  (when window-system
    (setq solarized-use-variable-pitch nil)
    (setq solarized-height-plus-1 1.0)
    (setq solarized-height-plus-2 1.0)
    (setq solarized-height-plus-3 1.0)
    (setq solarized-height-plus-4 1.0)
    (setq solarized-high-contrast-mode-line t)
    (load-theme 'solarized-dark t))
 #+END_SRC

** Highlight the current line

=global-hl-line-mode= softly highlights the background color of the line
containing point. It makes it a bit easier to find point, and it's useful when
pairing or presenting code.

#+BEGIN_SRC emacs-lisp
  (when window-system
    (global-hl-line-mode))
#+END_SRC

** Windmove

   #+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c C-<left>")  'windmove-left)
(global-set-key (kbd "C-c C-<right>") 'windmove-right)
(global-set-key (kbd "C-c C-<up>")    'windmove-up)
(global-set-key (kbd "C-c C-<down>")  'windmove-down)
   #+END_SRC
** buffer cycling
#+BEGIN_SRC emacs-lisp
 (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+END_SRC
** frames
   ElScreen is an Emacs utility with which you can have multiple screens
   (window-configuration) on your GNU Emacs as well as GNU screen on terminal.
   https://github.com/knu/elscreen

   #+BEGIN_SRC emacs-lisp
(elscreen-start)
(elscreen-persist-mode 1)
(setq elscreen-tab-display-control nil)
(setq elscreen-tab-display-kill-screen nil)

   #+END_SRC

** ido
*** ido itself
    #+BEGIN_SRC emacs-lisp
(ido-mode 1)
(ido-everywhere 1)
    #+END_SRC

*** ido ubiquitous
    #+BEGIN_SRC emacs-lisp
(require 'ido-ubiquitous)
(ido-ubiquitous-mode 1)
    #+END_SRC

*** vertical mode
    Makes ido-mode display vertically.
    #+BEGIN_SRC emacs-lisp
(require 'ido-vertical-mode)
(ido-mode 1)
(ido-vertical-mode 1)
(setq ido-vertical-define-keys 'C-n-and-C-p-only)
    #+END_SRC
*** flx-ido
    #+BEGIN_SRC emacs-lisp
(require 'flx-ido)

(flx-ido-mode 1)
; disable ido faces to see flx highlights.
(setq ido-enable-flex-matching t)
(setq ido-use-faces nil)
    #+END_SRC
* Org-mode
** Shortcuts
   #+BEGIN_SRC emacs-lisp
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(define-key global-map "\C-cc" 'org-capture)
   #+END_SRC
** filetype association
   #+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
(add-to-list 'auto-mode-alist '("\\.txt$" . org-mode))
   #+END_SRC
** Conflicts
*** shift-select
    shift-select works where org-mode does not have special functionality

    #+BEGIN_SRC emacs-lisp
(setq org-support-shift-select t)
    #+END_SRC
** Display prefs

   outline of pretty bullets instead of a list of asterisks.

   #+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
          (lambda ()
            (org-bullets-mode t)))
   #+END_SRC

   Use syntax highlighting in source blocks while editing.


   #+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
   #+END_SRC

   I like seeing a little downward-pointing arrow instead of the usual ellipsis (...) that org displays when there’s stuff under a header.

#+BEGIN_SRC emacs-lisp
(setq org-ellipsis "⤵")
#+END_SRC
** Task and org-capture management
*** Capturing tasks
    Define a few common tasks as capture templates.

    #+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      '(("b" "Blog idea"
         entry
         (file (org-file-path "blog-ideas.org"))
         "* TODO %?\n")

        ("l" "Today I Learned..."
         entry
         (file+datetree (org-file-path "til.org"))
         "* %?\n")

        ("r" "Reading"
         checkitem
         (file (org-file-path "to-read.org")))

        ("t" "Todo"
         entry
         (file org-index-file)
         "* TODO %?\n")))
    #+END_SRC

** Latex export
   useful source comments here :
   https://github.com/yyr/org-mode/blob/master/lisp/ox-latex.el
   #+BEGIN_SRC noemacs-lisp
(add-to-list 'org-latex-classes
             '("kgtech1"
               "\\documentclass{article}
\\usepackage[hidelinks]{hyperref}
\\usepackage[hyperref,x11names]{xcolor}
\\usepackage[colorlinks=true,urlcolor=SteelBlue4,linkcolor=Firebrick4]{hyperref}
               [NO-DEFAULT-PACKAGES]
               [NO-PACKAGES]"
             ("\\section{%s}" . "\\section*{%s}")
             ("\\subsection{%s}" . "\\subsection*{%s}")
             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
             ("\\paragraph{%s}" . "\\paragraph*{%s}")
             ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))



   #+END_SRC
*** from alcove
**** template definition
    #+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t
      org-latex-listings t)

(setq org-latex-template
      "\\documentclass[a4paper,oneside]{scrartcl}
[NO-DEFAULT-PACKAGES]
[NO-PACKAGES]
\\oddsidemargin -0.5 cm
\\evensidemargin -0.5 cm
\\marginparwidth 0.0 in
\\parindent 0.0 in
\\topmargin -1.5 cm
\\textheight 25.7 cm
\\textwidth 17 cm
\\advance\\headsep 2 ex
\\advance\\textheight -2 cm
\\renewcommand{\\baselinestretch}{1.14}
\\addtolength{\\parskip}{1.2 ex}

\\usepackage{color}
\\usepackage{listings}
\\usepackage{fancyheadings}

\\definecolor{lightgray}{RGB}{230,230,230}
\\definecolor{orange}{RGB}{255,127,0}
\\lstset{
breaklines=true,
breakindent=40pt,
prebreak=\\raisebox {0 ex }[0 ex ][0 ex ]{ \\ensuremath { \\hookleftarrow }},
basicstyle=\\ttfamily\\small,
keywordstyle=\\color{black}\\bfseries\\underbar,
identifierstyle=,
stringstyle=\\color{orange},
commentstyle=\\color{red},
language=bash,
backgroundcolor=\\color{lightgray},
showstringspaces=false}

\\lstdefinelanguage{diff}{
  morecomment=[f][\\color{black}\\bfseries\\underbar]{diff},
  morecomment=[f][\\color{blue}]{@@},
  morecomment=[f][\\color{red}]-,
  morecomment=[f][\\color{green}]+,
  morecomment=[f][\\color{black}]{---},
  morecomment=[f][\\color{black}]{+++},
}

\\fancyhf{}
\\fancyhf[HRE,HLO]{\\leftmark}
\\fancyhf[HLE,HRO]{\\includegraphics[width=2cm]{%s}}
\\fancyhf[FLE,FLO]{\\bfseries \\THETITLE}
\\fancyhf[FRE,FRO]{\\bfseries \\thepage/\\pageref*{LastPage}}

\\pagestyle{fancy}
\\linespread{1.05}

\\def\\title#1{\\gdef\\@title{#1}\\gdef\\THETITLE{#1}}
\\makeatletter
\\renewcommand\\maketitle{
  \\thispagestyle{empty}
  \\begin{center}
    \\includegraphics[width=8cm]{%s}\\par
    {\\Huge \\bfseries \\THETITLE\\par}
    {\\Large \\@author\\par}
    {\\large \\@date\\par}
  \\end{center}
}
\\makeatother

\\usepackage{graphicx}
\\usepackage{longtable}
\\usepackage{wrapfig}
\\usepackage{soul}
\\usepackage[colorlinks=true,urlcolor=SteelBlue4,linkcolor=Firebrick4]{hyperref}
\\usepackage[hyperref,x11names]{xcolor}
\\usepackage[a4]{}
\\usepackage{fancyheadings}
\\usepackage{palatino}
\\usepackage[frenchb, english]{babel}
\\usepackage[french]{varioref}
\\usepackage{float}
\\usepackage{lastpage}
\\usepackage{color}
\\usepackage[osf,sc]{mathpazo}
\\usepackage{MnSymbol}
\\usepackage[babel=true]{microtype}
\\usepackage{marvosym}
"
)
    #+END_SRC
**** class kgtech
    #+BEGIN_SRC emacs-lisp
(with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-classes
   `("kgtech"
     ,(format org-latex-template "\\string~/kgtech.jpg" "\\string~/kgtech.jpg")
     ("\\section{%s}" . "\\section*{%s}")
     ("\\subsection{%s}" . "\\subsection*{%s}")
     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
     ("\\paragraph{%s}" . "\\paragraph*{%s}")
     ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
)
    #+END_SRC
*** a4article
    #+BEGIN_SRC emacs-lisp
(with-eval-after-load 'ox-latex

  (add-to-list 'org-latex-classes
         '("a4article" "\\documentclass[11pt,a4paper]{article}
\\usepackage[hyperref,x11names]{xcolor}
\\usepackage[colorlinks=true,urlcolor=SteelBlue4,linkcolor=Firebrick4]{hyperref}
"
            ("\\section{%s}" . "\\section*{%s}")
            ("\\subsection{%s}" . "\\subsection*{%s}")
            ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
            ("\\paragraph{%s}" . "\\paragraph*{%s}")
            ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
)
    #+END_SRC

*** hitec
    #+BEGIN_SRC emacs-lisp
(with-eval-after-load 'ox-latex

  (add-to-list 'org-latex-classes
             '("hitec"
             "\\documentclass{hitec}
               \\usepackage{graphicx}
               \\usepackage{parskip}
               \\usepackage{pstricks}
               \\usepackage{textcomp}
               \\usepackage[tikz]{bclogo}
               \\usepackage{listings}
               \\usepackage{fancyvrb}
               \\presetkeys{bclogo}{ombre=true,epBord=3,couleur = blue!15!white,couleurBord = red,arrondi = 0.2,logo=\bctrombone}{}
               \\usetikzlibrary{patterns}
               \\company{Kgtech}
               \\usepackage[hyperref,x11names]{xcolor}
               \\usepackage[colorlinks=true,urlcolor=SteelBlue4,linkcolor=Firebrick4]{hyperref}
               [NO-DEFAULT-PACKAGES]
               [NO-PACKAGES]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
)
    #+END_SRC


*** from koma
    #+BEGIN_SRC noemacs-lisp
(setq org-latex-classes nil)
(add-to-list 'org-latex-classes
          '("koma-article"
             "\\documentclass{scrartcl}"
             ("\\section{%s}" . "\\section*{%s}")
             ("\\subsection{%s}" . "\\subsection*{%s}")
             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
             ("\\paragraph{%s}" . "\\paragraph*{%s}")
             ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    #+END_SRC
*** koma try
    #+BEGIN_SRC noemacs-lisp

(require 'ox-koma-letter)

(eval-after-load 'ox-koma-letter
  '(progn
     (add-to-list 'org-latex-classes
                  '("my-letter"
                    "\\documentclass\{scrlttr2\}
     \\usepackage[english]{babel}
     \\setkomavar{frombank}{(1234)\\,567\\,890}
     \[DEFAULT-PACKAGES]
     \[PACKAGES]
     \[EXTRA]"))

     (setq org-koma-letter-default-class "my-letter")))

    #+END_SRC

*** from emacs-fu
    #+BEGIN_SRC noemacs-lisp
(add-to-list 'org-latex-classes
  '("djcb-org-article"
"\\documentclass[11pt,a4paper]{article}
\\usepackage[T1]{fontenc}
\\usepackage{graphicx}
\\usepackage{geometry}
\\geometry{a4paper, textwidth=6.5in, textheight=10in,
            marginparsep=7pt, marginparwidth=.6in}
\\pagestyle{empty}
\\title{}
      [NO-DEFAULT-PACKAGES]
      [NO-PACKAGES]"
     ("\\section{%s}" . "\\section*{%s}")
     ("\\subsection{%s}" . "\\subsection*{%s}")
     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
     ("\\paragraph{%s}" . "\\paragraph*{%s}")
     ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    #+END_SRC

** presentation
   #+BEGIN_SRC emacs-lisp
(setq org-reveal-root "file:///~/.emacs.d/reveal.js")
   #+END_SRC
* Dired
Load up the assorted dired extensions.

#+BEGIN_SRC emacs-lisp
(require 'dired-x)
(require 'dired+)
(require 'dired-open)
#+END_SRC

Kill buffers of files/directories that are deleted in dired.
#+BEGIN_SRC emacs-lisp
(setq dired-clean-up-buffers-too t)
#+END_SRC

Always copy directories recursively instead of asking every time.
#+BEGIN_SRC emacs-lisp
(setq dired-recursive-copies 'always)
#+END_SRC

Ask before recursively deleting a directory, though.
#+BEGIN_SRC emacs-lisp
(setq dired-recursive-deletes 'top)
#+END_SRC
